[
{
	"uri": "/4-setup-load-balancer/4.1-create-target-group/",
	"title": "Create Target Group",
	"tags": [],
	"description": "",
	"content": "Create Target Group In the EC2 management interface, on the left side panel, scroll down to the Load Balancing section.\nSelect Target Group Click on Create target group The Specify group details dialog will appear. Configure it as follows:\nIn the Basic configuration section: Choose a target type: Instances Target group name: FCJ-Management-TG Continue in the Basic configuration section: Protocol: port HTTP, 5000 IP address: IPv4 VPC: AutoScaling-Lab Protocol version: HTTP1 Click Next Next, we proceed to Register target.\nIn the Available instance section: Select target group FCJ-Management-TG Ports for the selected instances: 5000 Choose Include as pending below In the Review targets section: You will see the target group has been registered previously Click Create target group Result We have completed the creation of the Target Group. Select the Target Group FCJ-Management-TG that was just created to view its information.\n"
},
{
	"uri": "/",
	"title": "Deploying FCJ Management with Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Deploying FCJ Management Application with Auto Scaling Group Overview In this exercise, we will deploy the application with an Auto Scaling Group to ensure the scalability of the application according to user needs. Additionally, we will implement a Load Balancer to distribute the load and manage user access requests to our Application Tier.\nMake sure to review the Deploying FCJ Management Application on a Windows/AmazonLinux Virtual Machine document and understand how to deploy the application on the virtual machine. We will utilize the virtual machine deployed for FCJ Management for large-scale deployment and scaling within the Auto Scaling Group.\nContents Introduction Preparation Create Launch Template Setup Load Balancer Test Create Auto Scaling Group Test Solutions Clean up Resources "
},
{
	"uri": "/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduce In this exercise, we will be deploying the application using an Auto Scaling Group to ensure the application\u0026rsquo;s scalability based on user demand. Additionally, we will implement a Load Balancer to distribute the load and manage user access requests to our Application Tier.\nBefore proceeding, please review the document [Deploying FCJ Management Application on a Windows/AmazonLinux Virtual Machine] to understand how to deploy the application on a virtual machine. We will utilize the virtual machine where FCJ Management is deployed for the purpose of mass deployment and scaling within the Auto Scaling Group.\nAuto Scaling Group Why Use Auto Scaling Group?\nWhen our application goes live, the volume of users accessing it will change over time. Therefore, we need to frequently adjust (scale) the number of instances to enhance availability and save costs. To automate and make scaling flexible, we have a solution known as the Auto Scaling Group.\nOverview of Auto Scaling Group\nAuto Scaling Group (ASG) helps automatically adjust the number of EC2 instances based on the needs of the application. ASG can automatically scale up when traffic increases or scale down when traffic decreases, optimizing resources and reducing costs. It also ensures high availability by distributing instances across multiple Availability Zones to maintain continuous operation even if part of the system encounters issues.\nTypes of Scaling in ASG\nIn this content, we will explore the following types of scaling:\nManual Scaling: Users manually adjust the number of EC2 instances in the Auto Scaling Group based on demand. This is a manual method that does not automatically respond to specific metrics. Dynamic Scaling: Automatically adjusts the number of instances based on real-time metrics such as CPU utilization, network traffic, or custom metrics from CloudWatch. Dynamic scaling has three primary policies: Target Tracking Scaling, Step Scaling, Simple Scaling. Scheduled Scaling: Allows us to configure specific times to automatically scale up or down instances, for example, increasing the number of instances during peak hours or decreasing them outside of working hours. This is suitable for scenarios where we already know the traffic pattern. Predictive Scaling: It predicts activity by analyzing historical load data to identify daily or weekly patterns in traffic flow. It uses this information to forecast future capacity needs, allowing Amazon EC2 Auto Scaling to proactively increase the capacity of the Auto Scaling group as needed. Launch Template Launch Template is a configuration that contains the necessary parameters to launch EC2 instances. It stores details such as instance type, AMI (Amazon Machine Image), key pair, network settings, security groups, and other configuration information for EC2. This simplifies the instance creation process and supports the automatic creation of new instances in ASG.\nElastic Load Balancer Elastic Load Balancer is a tool that helps evenly distribute workloads (traffic) to multiple servers or instances to ensure stable system operation and prevent any single server from becoming overloaded. It optimizes performance, increases availability, and ensures that if one server encounters issues, traffic will be redirected to other servers without affecting users.\nTarget Group Target Group is a component of the Elastic Load Balancer (ELB) that is used to identify and manage the EC2 instances that the Load Balancer will distribute traffic to.\n"
},
{
	"uri": "/2-preparation/2.1-setup-network/",
	"title": "Setup network infrastructure",
	"tags": [],
	"description": "",
	"content": "Create VPC Go to the AWS Management Console\nFind VPC Select VPC In the VPC Console\nClick Create VPC In the Create VPC interface\nSelect VPC and more Next, type your VPC name. In this lab, we name it AutoScaling-Lab IPv4 CIDR block, type 10.0.0.0/16 Select as follows:\nNumber of AZs: 3 Number of public subnets: 3 Number of private subnets: 3 NAT gateways: None Select as follows:\nVPC endpoints: None Choose Create VPC Allocate a public IP. Allocate a public IP.\nSelect Subnets Select public subnet Select Edit subnet settings Select Enable auto-assign public IPv4 address. Then select Save\nCheck if the allocation was successful.\nAllocate for the remaining public subnet (do the same).\nNext, we will create a Security group. - In the VPC console, select Security groups - Click Create security group\nConfigure the Security Group - Security group name, enter FCJ-Management-SG - Description, enter Security Group for FCJ Management - VPC,select the VPC you just created: AutoScaling-Lab.\nConfigure the Inbound rules - First, configure SSH on port 22 with Source: MyIP to allow access to the instance. - Next, allow HTTP on port 80. - Add Custom TCP on port 5000 for FCJ Management - Finally, allow HTTPS on port 443.\nCheck the Outbound rules and click Create security group\nCreate a security group for the database instance. We create a security group for the database instance. To ensure security, we do not configure the application\u0026rsquo;s security group.\nConfigure the security group\nSecurity Group name, enter FCJ-Mangement-DB-SG Description, enter Security Group for DB instance Select the VPC you just created. Configure the Inbound rules\nSelect Add rule Choose MYSQL/Aurora on port 3306 Then select the source as FCJ-Management-SG Check the Outbound Rules and finally click on Create Security Group.\n"
},
{
	"uri": "/7-test-solutions/7.1-test-manual-scaling-solution/",
	"title": "Test manual scaling solution",
	"tags": [],
	"description": "",
	"content": "Manual Scaling Manual Scaling is performed by manually adjusting the Desired capacity of the ASG. After adjusting and confirming the update, wait for a while, and the ASG will update the number of instances and proceed to either launch or terminate EC2 Instances depending on the Desired capacity setting.\nTest Setup Once the Auto Scaling Group is created, the service will automatically launch an EC2 Instance according to the configuration. To verify this, you can check the EC2 Console:\nSelect Load Balancer Choose the Resource map - new tab Here, you will see the Target Group linked to two Targets, which are two EC2 Instances (one is the original instance created, and the other is the instance created by ASG).\nNow, test the application that we downloaded earlier.\nOpen the application and click on the Test Type tab Test Type: Select CLICKS Run until: 100000 User Simulation Number Of Users: 1000 Click Delay: 1 second In the URLs tab, configure the following information:\nName: Manual Scaling Test (you can name it anything since we will use it to test other scaling methods later). URL: Copy the DNS of the Load Balancer and paste it. On the toolbar, click Start Test.\nRunning the Test Now go back to the AWS Management Console, in the EC2 Console:\nSelect both EC2 Instances in the target group Click on the Monitoring tab and start observing In this section, there are 7 charts, but for now, we only care about the following 5 charts:\nCPU Utilization (%): This chart shows the CPU resource usage of the two instances, each below 8%. Network in (bytes): This chart shows the incoming network traffic to the two instances, each under 2.9 million Megabytes. Network out (bytes): This chart shows the outgoing network traffic from the two instances, each under 17.3 million Megabytes. Network packets in (count): This chart shows the number of packets coming into the two instances, each under 6.85 thousand packets. Network packets out (count): This chart shows the number of packets going out from the two instances, each under 7.36 thousand packets. From now on, we will read the charts this way, including important metrics in the vertical, horizontal axes, and plotted lines. This will help us better understand how the Load Balancer distributes network traffic to instances in the Target Group.\nIf you select only one instance, the chart will show just one line representing that instance. The more instances you select from the list, the more lines will be shown on the graph.\nManually Adjusting the Desired Capacity of ASG Now, let’s return to the details page of the ASG we created earlier. In the Group details section, we can see: Desired capacity = 1.\nLet\u0026rsquo;s assume it\u0026rsquo;s off-peak hours, and we want to turn off one instance to save costs. To do this, we manually adjust the Desired capacity = 0. Click Edit.\nA Group size dialog will appear. Adjust the Desired capacity and Min desired capacity to 0 and click Update.\nThen, go to the Activity tab to check what the ASG is doing.\nWhile the instance is being shut down, you can stop the test program.\n=\u0026gt; We can see that the ASG automatically terminates an instance based on the configured settings.\nA few minutes later, if you return to the Load Balancer details page and go to the Resource map - new tab, you\u0026rsquo;ll see that there is now only one target remaining.\nAt this point, REMEMBER TO RESTART the test program.\nWe will also receive an email from SNS.\nWhen there is high traffic, the application\u0026rsquo;s performance may slow down slightly. You can open the application via the Load Balancer\u0026rsquo;s DNS to test.\nNow, go back to the EC2 Console, select the remaining target, and observe the charts.\nWe can see that the instance is now handling almost double the network traffic, and its CPU resource usage has nearly quadrupled.\nConclusion In reality, systems will involve more complex and time-consuming processes, consuming more CPU resources. In this tutorial, we only tested GET requests, but in real cases, the requests will be much more complicated.\n"
},
{
	"uri": "/4-setup-load-balancer/4.2-create-load-balancer/",
	"title": "Create Load Balancer",
	"tags": [],
	"description": "",
	"content": "Create Load Balancer In the EC2 management interface, in the left selection panel:\nSelect Load Balancers Click the Create Load Balancer button A \u0026ldquo;Compare and select load balancer type\u0026rdquo; panel appears.\nIn the Load balancer types section: Under Application Load Balancer Click Create You will see the \u0026ldquo;Create Application Load Balancer\u0026rdquo; panel.\nIn the Basic configuration section: Load balancer name: FCJ-Management-LB Scheme: Internet-facing Load balancer IP address type: IPv4 In the Network mapping section: Select VPC: AutoScaling-Lab Choose Public Subnets: ap-southeast-1a, ap-southeast-1b, ap-southeast-1c. Note: choose public subnet In the Security groups section: Security groups: FCJ-Management-SG In the Listeners and routing section: Default action: FCJ-Management-TG In the Summary section, you can review the information configured for the Load Balancer: Click the Create Balancer button Result After creating the Load Balancer, select FCJ-Management-LB to view its information.\nIn the management section for the created Load Balancer: Select Resource map - new to view an overview of the Load Balancer\u0026rsquo;s connections "
},
{
	"uri": "/2-preparation/2.2-launch-ec2-instance/",
	"title": "Launch EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Access the AWS Management Console:\nSearch for EC2 Select EC2 In the EC2 console:\nClick on Launch instances Name the instance, enter FCJ-Management\nFor AMI:\nSelect Quick Start Selec Amazon Linux Select Amazon Linux 2023 AMI Select Instance type:\nSelect t2.micro Click Create new key pair Configure the key pair\nName it fcj-key Key pair type: RSA Private key format: .pem Click Create key pair Configure the Network:\nClick the Edit button For VPC, select the VPC you created. For Subnet, choose Public subnet Check if Auto-assign public IP is enabled. If not, review the step for allocating a public IP when creating the VPC. 8. Continue:\nSelect Select existing security group and then choose FCJ-Management-SG. Click Launch instance. Complete the creation of the Security Group for the database.\n"
},
{
	"uri": "/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "In this exercise, we need to prepare some services to be able to deploy the FCJ Management application using Auto Scaling Group with Elastic Load Balancer. In general, we will deploy the ShareNote application according to the following architecture: Content Setup network infrastructure Launch EC2 instance Launch Database instance with RDS Setup data for database Deploy web server Prepare metric cho Predictive scaling "
},
{
	"uri": "/7-test-solutions/7.2-test-scheduled-scaling-solution/",
	"title": "Test scheduled scaling solution",
	"tags": [],
	"description": "",
	"content": "Scheduled Scaling Scheduled Scaling allows us to inform the ASG when it should launch additional instances and when it should remove instances. This type of scaling is suitable for workloads that fluctuate over a certain period, recurring daily, and over a long period.\nSince we\u0026rsquo;ve already set up the testing in the previous section, we don\u0026rsquo;t need to set it up again, and we can continue using those settings.\nConfiguration Go to the ASG information page, navigate to the \u0026ldquo;Automatic scaling\u0026rdquo; tab, and scroll to the bottom.\nUnder the \u0026ldquo;Scheduled actions\u0026rdquo; section, click Create scheduled action.\nA form will appear. Fill in the details as follows:\nName: Rush hour. Desired capacity: 1. Min: 1 (you can set it to 0). Max: 3. Recurrence: Once (or any other option). Time zone: Asia/Ho_Chi_Minh. Specific start time: Set it to the nearest time you\u0026rsquo;re configuring. Click Create to create the scheduled action. The parameters for Desired capacity, Min, and Max will all affect the corresponding ASG parameters, so in practice, you will need to combine multiple scaling types and carefully consider these settings.\nSuccessfully created.\nTesting Approximately 5 minutes before the ASG launches instances as scheduled, we should run the test program.\nAfter a few minutes, when the scheduled time for ASG to launch new instances arrives, go to the Activity tab to monitor ASG actions. You\u0026rsquo;ll see the Executing scheduled action Rush hour event triggered at the right time, and then the ASG launches a new instance.\nReturning to the EC2 Console, metrics are updated every 15 minutes. When you revisit to observe these metrics, focus on the CPU Utilization chart. You can see that between 14:30 and 14:40, there is a spike, which was caused when we started the test program.\nWait a few more minutes for these metrics to update. Once updated, select the newly launched instance.\nYou will notice that after 14:40, the chart declines.\nZoom in on this chart:\nSelect 1h. Select 1 second. You\u0026rsquo;ll see the changes more clearly.\nConclusion In reality, trading platforms often experience peak user traffic at certain times of the day. This increase in traffic is similar to rush hour in transportation, where traffic rises at a specific time each day and repeats daily for a long period. In such cases, we need to schedule new instances to handle the load.\nHowever, in practice, we will need to combine this with other types of scaling to enhance the reliability of the system.\n"
},
{
	"uri": "/3-create-launch-template/",
	"title": "Create Launch Template",
	"tags": [],
	"description": "",
	"content": "AMIs and Launch Template AMIs (Amazon Machine Images) store information such as the operating system, applications, and settings in the EC2 instance from which they are created. Creating an AMI ensures that when new servers are launched, they are identical and can operate immediately.\nA launch template is a tool we use to configure the initialization of new EC2 instances through attached AMIs, instance types, network configurations, and security options. When we want to launch one or more identical servers, we simply use the configured launch template to do so.\nSetting Up Launch Templates Creating Amazon Machine Images (AMIs) from EC2 In the EC2 management interface, on the right selection panel:\nSelect Instances Select the FCJ-Management instance Click on Actions Choose Image and templates Click Create image In the configuration panel for Create AMI, fill in the following information:\nImage name: FCJ-Management-AMI Image description: AMI for FCJ-Management Click Create Image After creating the AMI, we will check the newly created AMI:\nSelect AMIs to see the newly created AMI Click on FCJ-Management-AMI The AMI initialization process will take about 3 minutes; after this period, we will see the Status of the AMI change to Available.\nWe have successfully created an image to save the EC2 configuration.\nCreating Launch Templates In the EC2 management interface, on the right selection panel:\nSelect Launch Templates Click on Create launch template In the Create launch template panel, fill in the following information:\nIn the Launch template name and description: Launch template name: FCJ-Management-template Template version description: Template for FCJ Management In the Application and OS Image (Amazon Machine Image): Select My AMIs Choose Owned by me Select the Amazon Machine Image (AMI) type and choose the created AMI FCJ-Management-AMI In the Instance type: Choose instance type t2.micro In the Key pair (logic): Select the key pair named fcj-key In the Network settings: Choose the public subnet AutoScaling-Lab-public-ap-southeast-1a Select Select existing security group Choose the security group FCJ-Management-SG Finally, click Create launch template Result Check the newly created Launch Template:\nSelect FCJ-Management-template Here, we can review the configuration of the Launch Template we created. We have just completed creating the launch template.\n"
},
{
	"uri": "/2-preparation/2.3-launch-db-instance/",
	"title": "Launch a Database Instance with RDS",
	"tags": [],
	"description": "",
	"content": "Create a subnet group for the database instance. Access the AWS AWS Management Console\nSearch for RDS Select RDS Continue:\nSelect Subnet groups Select Create DB subnet group In the Create DB subnet group interface\nFor Name, enter FCJ-Management-Subnet-Group For Description, enter Subnet Group for FCJ Management Select the VPC you created. Configure the subnet\nSelect the availability zones (AZs) Choose the private subnets. Click on Create\nSuccessfully created the DB Subnet Group with 2 AZs.\nCreate a database instance. Access the RDS AWS Management Console\nSelect Databases Click on Create database Choose the method to create the database\nSelect Standard create Configure the Engine for the database\nSelect MySQL Configure Template\nSelect Production Select Mutil-AZ DB instance Next, proceed with the detailed configuration\nFor DB instance identifier, enter fcj-management-db-instance For Master username, enter admin Select Self managed Continue: - For Master password, enter your choice (in this lab, enter 123Vodanhphai) - For Confirm password, re-enter the password once more.\nConfigure the details for the instance:\nSelect db.m5d.large Select General Purpose SSD (gp3) For Allocated storage, enter 20 Configure the Connectivity for the db instance\nSelect Don\u0026rsquo;t connect to an EC2 compute resouce For VPC, select the created AutoScaling-Lab For Subnet group, choose the subnet group you created. Continue:\nFor VPC security group, select Choose existing For Security Group, select FCJ-Management-DB-SG (to avoid confusion with the web application\u0026rsquo;s security group). Initialize the database with the name awsfcjuer, and leave the rest as default.\nClick on Create database\nThe database instance has been created successfully.\nWe have the Endpoint and Port as shown below.\n"
},
{
	"uri": "/7-test-solutions/7.3-test-dynamic-scaling-solution/",
	"title": "Test dynamic scaling solution",
	"tags": [],
	"description": "",
	"content": "Dynamic Scaling Dynamic scaling is based on the metrics provided by CloudWatch. Depending on how we configure it, ASG will either launch or terminate instances. We can configure ASG to launch a new instance when the CPU resources of an instance or instances exceed 90%, or if the network traffic is high, or if the number of packets sent to each instance is large.\nDepending on the system and requirements, we will configure it differently. In this example, we will configure it based on the \u0026ldquo;number of packets sent to each instance.\u0026rdquo;\nConfiguration Before testing, we will manually scale in by terminating one instance. Then, go to the Activity tab and check again.\nAfter deleting, we will now configure dynamic scaling. Go to the Automatic scaling tab.\nClick Create dynamic scaling policy to create a new scaling policy. In this form, fill in the following details:\nPolicy type: Target tracking scaling. Scaling policy name: Request Over 500 per target. Metric type: Application Load Balancer request count per target. Target group: FCJ-Management-TG. Target value: 500 (requests). Instance warmup: 60 seconds (it is recommended to set a higher value). Click Create to create the policy. The Instance warmup parameter affects the time an instance starts receiving external traffic. Specifically, when an instance is created and in the InService state (ready to operate), you can adjust the time it takes for an instance to begin receiving and processing requests. This time is called instance warmup. Adjusting this parameter allows more time for the instance to become fully stable, as the application may need to update and install dependencies or connect to other services to function properly.\nResult:\nTesting Start the test program.\nGo to the EC2 Console to see how many requests are being sent to EC2.\nWait a moment for the metrics to update. You\u0026rsquo;ll notice that the graphs are trending upwards or stabilizing.\nReturn to the Activity tab of ASG. You will see 3 instances have been launched. Since the request volume is high, ASG calculates that it needs to create the maximum desired number of instances.\nGo back to the EC2 Console, select all the newly created instances, and observe the charts.\nYou will notice that the green line is gradually going down, and other lines are starting to appear.\nAs mentioned before, metrics update every 15 minutes, so you will need to wait a bit to see the results.\nNow, we will stop the test program.\nGo to the ASG Activity tab and wait for ASG to terminate the unnecessary instances. This process may take a while.\nConclusion When ASG detects that the system is becoming overloaded based on certain metrics, it will launch additional instances to bring the system back to a stable state. However, dynamic scaling is not very fast, as mentioned earlier. When scaling policies are created, they impact the core metrics, and ASG will \u0026ldquo;look\u0026rdquo; at them to decide whether to scale up or down.\nAs a result, the number of instances is calculated and updated at a slower pace. To address this, we can use Predictive Scaling, which allows ASG to react more quickly.\n"
},
{
	"uri": "/7-test-solutions/7.4-test-predictive-scaling-solution/",
	"title": "Read metrics of predictive scaling solution",
	"tags": [],
	"description": "",
	"content": "Predictive Scaling From the traffic and workloads that the system receives and sends each day, ASG can \u0026ldquo;predict\u0026rdquo; the future traffic and workloads for the upcoming days. This helps ASG respond better by launching or terminating instances accordingly. Typically, Predictive Scaling is used in combination with other types of scaling.\nConfiguration As in the previous section, I will manually scale in with ASG and wait for ASG to terminate all the instances created by this service.\nNext, delete the automatic scaling policy to avoid affecting this test.\nThen, go to the Activity tab, scroll down to Predictive scaling policies, and click Create predictive policy to create a new one.\nIn this form, we will configure as follows:\nPolicy details Name: PredictCPUUtilizationAt15Percent (you can choose any name) Turn on scaling: enable Scale based on forecast. With the predictive scaling policy, essentially, it only makes predictions, but we can also use it to launch instances. Next, in the Metric and target utilization section:\nMetrics: select Custom metric pair. Load metric: select Custom CloudWatch metric. Scaling metric: select Custom CloudWatch metric. You will add custom metric JSON as follows:\nFor Load metric { \u0026#34;CustomizedLoadMetricSpecification\u0026#34;: { \u0026#34;MetricDataQueries\u0026#34;: [ { \u0026#34;Label\u0026#34;: \u0026#34;Total CPU Utilization in ASG\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;cpu_sum\u0026#34;, \u0026#34;MetricStat\u0026#34;: { \u0026#34;Metric\u0026#34;: { \u0026#34;MetricName\u0026#34;: \u0026#34;WSCustomCPUUTILIZATION\u0026#34;, \u0026#34;Namespace\u0026#34;: \u0026#34;FCJ Management Custom Metrics\u0026#34;, \u0026#34;Dimensions\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;AutoScalingGroupName\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;FCJ-Management-ASG\u0026#34; } ] }, \u0026#34;Stat\u0026#34;: \u0026#34;Sum\u0026#34; }, \u0026#34;ReturnData\u0026#34;: true } ] } } For Scaling metric { \u0026#34;CustomizedScalingMetricSpecification\u0026#34;: { \u0026#34;MetricDataQueries\u0026#34;: [ { \u0026#34;Label\u0026#34;: \u0026#34;Average CPU Utilization in ASG\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;cpu_avg\u0026#34;, \u0026#34;MetricStat\u0026#34;: { \u0026#34;Metric\u0026#34;: { \u0026#34;MetricName\u0026#34;: \u0026#34;WSCustomCPUUTILIZATION\u0026#34;, \u0026#34;Namespace\u0026#34;: \u0026#34;FCJ Management Custom Metrics\u0026#34;, \u0026#34;Dimensions\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;AutoScalingGroupName\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;FCJ-Management-ASG\u0026#34; } ] }, \u0026#34;Stat\u0026#34;: \u0026#34;Average\u0026#34; }, \u0026#34;ReturnData\u0026#34;: true } ] } } Next, check Add custom capacity metric.\nSimilarly to the previous two steps, I will add custom metric JSON for Capacity metric.\n{ \u0026#34;CustomizedCapacityMetricSpecification\u0026#34;: { \u0026#34;MetricDataQueries\u0026#34;: [ { \u0026#34;Label\u0026#34;: \u0026#34;Number of instances in ASG\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;capacity_avg\u0026#34;, \u0026#34;MetricStat\u0026#34;: { \u0026#34;Metric\u0026#34;: { \u0026#34;MetricName\u0026#34;: \u0026#34;WSCustomGroupInstances\u0026#34;, \u0026#34;Namespace\u0026#34;: \u0026#34;FCJ Management Custom Metrics\u0026#34;, \u0026#34;Dimensions\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;AutoScalingGroupName\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;FCJ-Management-ASG\u0026#34; } ] }, \u0026#34;Stat\u0026#34;: \u0026#34;Average\u0026#34; }, \u0026#34;ReturnData\u0026#34;: true } ] } } If you configured 2.6 - Prepare metrics for predictive scaling earlier, after completing the setup, you will see two charts displayed.\nIn the Pre-launch instances section of Additional scaling settings - optional, set it to 1 minute. Click Create to create the policy.\nSimilar to Dynamic scaling, this Pre-launch instances setting will affect when the instances will be launched. For example, if ASG predicts a peak at 23:00, it will launch instances at 22:59, according to the configuration.\nCheck the results.\nReading Metrics from Sample Data In that policy, you will see two charts: Load and Capacity. These charts provide data on previous traffic and the number of instances used in previous days, allowing predictions for the upcoming days, represented by the purple line.\nThe chart is in UTC+0, and we are in UTC+7, so you\u0026rsquo;ll need to add 7 hours when reading these charts.\nFirst, focus on the chart on the left. At 15:00 UTC (which is 22:00 in Vietnam time), the total load was 164.546.\nTo understand what this number represents, look at the chart on the right.\nWe can see that at that time, 13 instances were predicted to be launched, and the load correlates with these instances.\nYou can check other times as well.\nIf you wait for the predicted time, go to the ASG\u0026rsquo;s Activity tab, and you\u0026rsquo;ll see that ASG launches a new instance at 21:59, one minute before 22:00, as predicted above.\nConclusion We can combine Predictive Scaling with Dynamic Scaling or other scaling types to increase ASG\u0026rsquo;s flexibility and the system\u0026rsquo;s reliability. For systems with consistent load over time, using predictive scaling is also a reasonable approach.\n"
},
{
	"uri": "/4-setup-load-balancer/",
	"title": "Setting Up Load Balancer",
	"tags": [],
	"description": "",
	"content": "Load Balancer A Load Balancer is a crucial step in ensuring high availability and scalability for your application. It distributes incoming traffic across multiple targets, such as EC2 instances, containers, or IP addresses, optimizing resource use, improving performance, and ensuring fault tolerance.\nContents Create Target Group Create Load Balancer "
},
{
	"uri": "/2-preparation/2.4-add-data-to-db/",
	"title": "Setup data for Database",
	"tags": [],
	"description": "",
	"content": "Retrieve the Public IP address of the EC2 instance.\nUse MobaXterm to connect to the instance via SSH on port 22:\nSelect Session Select SSH For Remote host, enter the Public IPv4 address retrieved from the instance For Specify username, nhập ec2-user Verify port 22 Select Advanced SSH settings Select Use private key and select keypair of instance. Click OK The result after SSH.\nWe use Git to clone the source code. First, install Git using the following command:\nsudo yum install git Install MySQL command-line client\nsudo dnf install mariadb105 Check if the installation was successful.\nmysql --version Connect to the MySQL command-line client (unencrypted)\nFor the -h parameter, replace it with the DNS name (endpoint) of the DB instance. You can find the DNS name in the detail console of the RDS you created. For the -P parameter, replace it with the port for the DB instance (3306). For the -u parameter, replace it with the master user you set when creating the RDS. After running the command, enter the master user password that you set during the creation of the RDS. mysql -h fcj-management-db-instance.cdysiiecu90g.ap-southeast-1.rds.amzonaws.com -P 3306 -u admin -p Successfully connected to the DB instance. Proceed to check the databases within the instance using the command, which will display a list of all databases.\nSHOW DATABASES; Select the database to make changes by using the USE command; use the initial database that you created when setting up the RDS.\nUSE \u0026#34;name of database\u0026#34;; Create a table in the awsuser database using the CREATE TABLE command.\nCREATE TABLE `awsfcjuser`.`user` ( `id` INT NOT NULL AUTO_INCREMENT , `first_name` VARCHAR(45) NOT NULL , `last_name` VARCHAR(45) NOT NULL , `email` VARCHAR(45) NOT NULL , `phone` VARCHAR(45) NOT NULL , `comments` TEXT NOT NULL , `status` VARCHAR(10) NOT NULL DEFAULT \u0026#39;active\u0026#39; , PRIMARY KEY (`id`)) ENGINE = InnoDB; Insert information into the table using the INSERT INTO command\nINSERT INTO `user` (`id`, `first_name`, `last_name`, `email`, `phone`, `comments`, `status`) VALUES (NULL, \u0026#39;Amanda\u0026#39;, \u0026#39;Nunes\u0026#39;, \u0026#39;anunes@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Alexander\u0026#39;, \u0026#39;Volkanovski\u0026#39;, \u0026#39;avolkanovski@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Khabib\u0026#39;, \u0026#39;Nurmagomedov\u0026#39;, \u0026#39;knurmagomedov@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Kamaru\u0026#39;, \u0026#39;Usman\u0026#39;, \u0026#39;kusman@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Israel\u0026#39;, \u0026#39;Adesanya\u0026#39;, \u0026#39;iadesanya@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Henry\u0026#39;, \u0026#39;Cejudo\u0026#39;, \u0026#39;hcejudo@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Valentina\u0026#39;, \u0026#39;Shevchenko\u0026#39;, \u0026#39;vshevchenko@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Tyron\u0026#39;, \u0026#39;Woodley\u0026#39;, \u0026#39;twoodley@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Rose\u0026#39;, \u0026#39;Namajunas \u0026#39;, \u0026#39;rnamajunas@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Tony\u0026#39;, \u0026#39;Ferguson \u0026#39;, \u0026#39;tferguson@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Jorge\u0026#39;, \u0026#39;Masvidal \u0026#39;, \u0026#39;jmasvidal@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Nate\u0026#39;, \u0026#39;Diaz \u0026#39;, \u0026#39;ndiaz@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Conor\u0026#39;, \u0026#39;McGregor \u0026#39;, \u0026#39;cmcGregor@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Cris\u0026#39;, \u0026#39;Cyborg \u0026#39;, \u0026#39;ccyborg@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Tecia\u0026#39;, \u0026#39;Torres \u0026#39;, \u0026#39;ttorres@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Ronda\u0026#39;, \u0026#39;Rousey \u0026#39;, \u0026#39;rrousey@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Holly\u0026#39;, \u0026#39;Holm \u0026#39;, \u0026#39;hholm@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Joanna\u0026#39;, \u0026#39;Jedrzejczyk \u0026#39;, \u0026#39;jjedrzejczyk@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;); Use the SELECT command to display the table.\nSELECT * FROM user; Use exit to leave. If you are unable to disconnect from the DB instance, use the key combination Ctrl+C.\n"
},
{
	"uri": "/2-preparation/2.5-deploy-web-server/",
	"title": "Deploy Web Server",
	"tags": [],
	"description": "",
	"content": "Install Node Version Manager (nvm) by entering the following command into the terminal:\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash To install Node.js using nvm, enter the following command in the terminal.\nnvm install 20 Clone the application repository by running the following command in your terminal:\ngit clone https://github.com/First-Cloud-Journey/000004-EC2.git Navigate to the directory for lab 000004-EC2\ncd 000004-EC2 NPM, short for Node Package Manager, is a vital tool for managing JavaScript libraries and dependencies in Node.js applications.When you run the command npm init, it initializes a new Node.js project and creates a package.json file. This file contains metadata about the project, such as its name, version, description, and a list of dependencies.\nnpm init Install pm2 globally; PM2 is used to manage and monitor running Node.js applications. It allows applications to run in the background.\nnpm install -g pm2 Next, we redefine the script to run the application. We will use vim to open the package.json file and in the scripts section under the key start, assign it the following value. This will allow our application to run in the background:\npm2 start app.js Continue using vim to access the .env file, then enter the following content to set up the connection to the database.\nDB_HOST=\u0026#39;fcj-management-db-instance.cdysiiecu90g.ap-southeast-1.rds.amzonaws.com\u0026#39; DB_NAME=\u0026#39;awsfcjuser\u0026#39; DB_USER=\u0026#39;admin\u0026#39; DB_PASS=\u0026#39;123Vodanhphai\u0026#39; Proceed to start the application.\nnpm start The command pm2 status in PM2 is used to display the current status of all applications being managed by PM2. When you run this command, you\u0026rsquo;ll receive an overview of each application, including details like their state (running, stopped, etc.), memory usage, CPU usage, and the number of restarts. This helps in monitoring the performance and health of your Node.js applications effectively.\nNext, we need to obtain the public DNS of the instance so that we can access the application from the browser.\nOur application is running stably\nNext, we use the command pm2 startup to configure PM2 to automatically restart applications when the server reboots. It will prompt you to set up a Startup Script. Please copy and paste that command and execute it.\nTo ensure that the running applications are saved and restarted when the server reboots, we need to run the command pm2 save. This command will save the current state of the processes to the startup list.\n"
},
{
	"uri": "/5-test/",
	"title": "Test",
	"tags": [],
	"description": "",
	"content": "Test the result After deploying the Load Balancer, we will take the DNS name of the LB and paste it into the browser to test the deployment result.\nAnd here is the result.\nNow, we will perform some actions to check if the system is functioning properly. Try changing the information of a record.\nAfter entering the information, we click Submit and receive a notification.\nReturn to the homepage and get the result.\nIn the following test steps, we will mainly read the metrics, but you can also read and check whether the application slows down during the testing process.\n"
},
{
	"uri": "/6-create-auto-scaling-group/",
	"title": "Create Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Issue in the Previous Section In the testing results mentioned earlier, we can see that when the application receives many requests, it becomes unstable. The solution is to increase the number of EC2 Instances in the system and use a Load Balancer to distribute the requests from users.\nHowever, this manual method is not very practical because to launch an EC2 Instance, we need to have the \u0026ldquo;core\u0026rdquo; inside it, which is the application responsible for handling those requests along with other libraries.\nSetting Up Auto Scaling Group Setting Up Launch Template In the EC2 management console, scroll down the selection panel on the right.\nSelect Auto Scaling Groups. Click Create Auto Scaling group. In the Auto Scaling group creation interface, enter the following information:\nName: FCJ-Management-ASG In Launch template: Launch template: select FCJ-Management-template (or any name you choose). Version: Default (1) as the default choice. Note that the ASG name should match the name of the ASG set in section 2.6, which is for preparing data for Predictive Scaling.\nThe Launch template selected for the ASG must be the one configured with MySQL Client, Node, Source Code, and PM2 to ensure the Targets operate normally. If you followed the steps in sections 2 and 3, you have done it correctly.\nConfiguring the Network In the Network section, select the following information:\nVPC: select AutoScaling-Lab VPC, which we created earlier in the tutorial. Availability Zones and subnets: select 3 public subnets that we created. Click Next. Configuring the Load Balancer and Other Settings Previously, we created an Application Load Balancer and a Target Group and attached it to the Load Balancer. Now, select the following options:\nLoad balancing: select Attach to an existing load balancer. Attach to an existing load balancer: choose Choose from your load balancer target group. Existing load balancer target group: select FCJ-Management-TG | HTTP. When the Target Group and Application Load Balancer are correctly configured, the Existing load balancer target group option will show the Target Group, indicating that both ALB and TG exist.\nIn the VPC Lattice integration options: select No VPC Lattice service, as we are not configuring this option in this tutorial.\nNext, in Health checks, select (check) Turn on Elastic Load Balancing health checks. Leave the remaining settings as default.\nIn the Additional settings section, under Monitoring:\nSelect (check) Enable group metrics collection within CloudWatch. Click Next. Setting Group Size and Scaling In this section, define the group\u0026rsquo;s scaling behavior and the number of Instances to be created during scaling, including scaling out (expanding) and scaling in (shrinking).\nIn the Group size section: Desired capacity: 1 In the Scaling section: Scaling limits: Min desired capacity: 1 Max desired capacity: 3 In the Automatic scaling - optional section: choose No scaling policies for now, as we won\u0026rsquo;t configure scaling policies for the ASG yet.\nIn the Instance maintenance policy section: choose No policy.\nWe are not configuring ASG policies here because we will apply scaling strategies later, including four different strategies.\nSetting Up Notifications In this section, we\u0026rsquo;ll configure email notifications (using Amazon SNS) when the ASG:\nLaunches a new Instance. Terminates an Instance. Fails to launch an Instance. Fails to terminate an Instance. We\u0026rsquo;ll create notifications for one email address, including the following details:\nSend a notification to: asg-topic. Select a topic to send notifications. With these recipients: enter the email address where you want SNS to send notifications. Event types: select all. Click Next. Review the information and click Create Auto Scaling group.\nResults During the creation process, an email will be sent, so make sure to check and confirm email notifications from the selected topic.\nSince we set Desired capacity = 1, when the ASG is created, it will automatically launch a new Instance, and you\u0026rsquo;ll receive a new email.\nCheck the Activity tab of the FCJ-Management-ASG to verify.\nDuring the execution of other scaling strategies, you may receive many emails, so keep an eye on your inbox. This is intentional to help monitor what is happening more easily.\n"
},
{
	"uri": "/2-preparation/2.6-prepare-metrics-for-predictive-scaling/",
	"title": "Prepare metric for Predictive scaling",
	"tags": [],
	"description": "",
	"content": "Preparing Data for Predictive Scaling Since Predictive Scaling requires more than 2 days\u0026rsquo; worth of data to make predictions for the following days, and we don’t have this data available, we will need to simulate such an environment.\nPreparation Steps First, create a new folder named metric-preparation and navigate into this directory.\nmkdir metric-preparation \u0026amp;\u0026amp; cd metric-preparation Then, download the script to prepare the data.\ncurl -o prepare-metric-data.sh https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/prepare-metric-data.sh After downloading, modify the script slightly.\nvim prepare-metric-data.sh Once the script is edited, proceed to download the raw data, which is why we need to prepare this data processing script first. Start with metrics for the instances.\ncurl -o metric-cpu.json https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/metric-cpu.json Next, download the data for CPU.\ncurl -o metric-cpu.json https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/metric-cpu.json Edit the two types of data one by one, starting with CPU.\nbash prepare-metric-data.sh metric-cpu.json FCJ-Management-ASG \u0026amp;\u0026amp; cat metric-cpu.json Then proceed with the instance data.\nbash prepare-metric-data.sh metric-instances.json FCJ-Management-ASG \u0026amp;\u0026amp; cat metric-instances.json The parameter FCJ-Management-ASG that appears in the two commands above is the name of the Auto Scaling Group that we will create later. Therefore, you need to create an ASG with the same name afterward, or you should change it to a different name now.\nUpload Data to CloudWatch In Amazon Linux 2023, if you are using the correct AMI, AWS CLI is pre-installed. At this point, you only need to configure the credentials. Remember that you must have an IAM User with sufficient permissions to upload data to CloudWatch or at least enough to complete this workshop.\nGo to the IAM page, open the IAM User details, and get the Access Key Id and Secret Access Key. If you don\u0026rsquo;t have one, create a new one.\naws configure And configure the credentials.\nAfter that, upload the two data files we prepared earlier to CloudWatch.\naws cloudwatch put-metric-data --namespace \u0026#39;FCJ Management Custom Metrics\u0026#39; --metric-data file://metric-cpu.json aws cloudwatch put-metric-data --namespace \u0026#39;FCJ Management Custom Metrics\u0026#39; --metric-data file://metric-instances.json Verification Finally, we will check the results in CloudWatch.\nSearch for CloudWatch Click to enter the CloudWatch Console. In the CloudWatch Console:\nSelect All metrics Choose FCJ Management Custom Metrics Next, select AutoScalingGroupName.\nThen, select the two parameters as shown in the image, and wait for some time to receive the results.\nWe will have to wait about 30 minutes or longer for CloudWatch to process the data. Instead of waiting, we can proceed with the next sections.\n"
},
{
	"uri": "/7-test-solutions/",
	"title": "Test solutions",
	"tags": [],
	"description": "",
	"content": "Scaling Solutions / Techniques The Auto Scaling Group service provides different scaling solutions depending on the needs and usage levels of our system. Therefore, we need to calculate, estimate, observe, and plan the use of each type or combine them to increase the flexibility of the system.\nIn this section, we will go through each solution, but before diving into the details, let\u0026rsquo;s take a brief look at these scaling solutions.\nManual scaling We manually scale up or down the targets in a Target Group by adjusting the Desired capacity parameter in the Auto Scaling Group. This action is called Manual Scaling. In certain quick, individual situations, we may need to add or remove targets manually.\nScheduled scaling When we understand the network traffic in and out of the system or the time when targets operate at near-maximum capacity, and this activity is consistent and long-term (possibly annually), we can schedule (and set a timer) for the Auto Scaling Group to scale up or down the targets.\nDynamic scaling If the incoming network traffic to the system doesn\u0026rsquo;t follow a predictable pattern and is hard to forecast, we can use the automatic scaling solution from ASG. In this case, ASG will use the Dynamic scaling policy configuration to scale the targets more appropriately for the system.\nPredictive scaling Another technique is that ASG can predict the network traffic for the next 3 or more days. For unpredictable systems, we can rely on this solution along with Dynamic scaling to increase system flexibility. This solution will show parameters based on how we configure it, but the general idea is to predict traffic and usage levels within the system.\nSince we don\u0026rsquo;t have data from the previous section, this is why we need to prepare and run sample data from 2.6 - Prepare metrics for predictive scaling beforehand.\nInstalling the test program Before diving into this section, we need to download a test program to simulate a system under high traffic. First, go to this link to download the test program: https://www.paessler.com/tools/webstress\nWe will download a RAR file, extract the installation file from it, and install the program. After installation, we will open the program and see the interface as shown below:\nContent Test the manual scaling solution Test the scheduled scaling solution Test the dynamic scaling solution Test the predictive scaling solution This section takes a lot of time and requires careful observation (you can test while running the simulations), so be patient and meticulous in observing the results.\n"
},
{
	"uri": "/8-cleanup/",
	"title": "Cleanup Resources",
	"tags": [],
	"description": "",
	"content": "Cleanup Resources After completing the workshop, we will proceed with the cleanup of resources.\nDelete Auto Scaling Group In the EC2 management interface, on the left navigation pane, scroll down and select Auto Scaling Groups.\nSelect the Auto Scaling Group FCJ-Management-ASG Click the Actions button at the top right of the screen Choose Delete Delete Load Balancer In the EC2 management interface, on the left navigation pane, scroll down and select Load Balancer.\nSelect the Load Balancer FCJ-Management-LB Click the Actions button at the top right of the screen Choose Delete load balancer Delete Target Group In the EC2 management interface, on the left navigation pane, scroll down and select Target Group.\nSelect the Target Group FCJ-Management-TG Click the Actions button at the top right of the screen Choose Delete Delete Launch Template In the EC2 management interface, on the left navigation pane, scroll down and select Launch Templates.\nSelect the Launch Template FCJ-Management-TG Click the Actions button at the top right of the screen Choose Delete template Deregister AMI In the EC2 management interface, on the left navigation pane, scroll down and select AMIs.\nSelect the AMI FCJ-Management-AMI Click the Actions button at the top right of the screen Choose Deregister AMI Terminate EC2 Instance In the EC2 management interface, on the left navigation pane, select Instances.\nSelect the FCJ-Management instance Click the Instance state button at the top right of the screen Choose Terminate (delete) instance Delete RDS Database Access RDS On the left navigation pane, select Databases Select the database instance fcj-management-db-instance related to the lab. Click Modify. In the Modify DB Instance section, scroll down to the bottom:\nUncheck Enable deletion protection Click Continue Continue in the Schedule modifications section:\nSelect Apply immediately Click Modify DB instance Proceed to delete the DB instance:\nSelect the database instance fcj-management-db-instance Click the Actions button at the top right of the screen Choose Delete Select I acknowledge that upon instance deletion, automated, including system snapshots and point-in-time recovery, will no longer be available Enter delete me Click Delete Delete Subnet Group Select Subnet groups Select the subnet group fcj-management-subnet-group Click Delete "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]