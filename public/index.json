[
{
	"uri": "/2-prerequiste/2.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Create VPC Go to the AWS Management Console\nFind VPC Select VPC In the VPC interface\nSelect Your VPCs Select Create VPC In the Create VPC interface\nSelect VPC, subnets, etc, Name, enter your VPC name. IPv4 CIDR block, enter 10.0.0.0/16 Select Create VPC Create VPC successfully and select View VPC Details of the newly created VPC.\nImplement public IP allocation.\nSelect Subnets Select public subnet Select Edit subnet settings Select Enable auto-assign public IPv4 address. Select Save Check that the allocation was successful. Allocate the remaining Public subnet (do the same). "
},
{
	"uri": "/",
	"title": "Deploying FCJ Management with Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Deploying FCJ Management Application with Auto Scaling Group Overview In this exercise, we will deploy the application with an Auto Scaling Group to ensure the scalability of the application according to user needs. Additionally, we will implement a Load Balancer to distribute the load and manage user access requests to our Application Tier.\nMake sure to review the [Deploying FCJ Management Application on a Windows/AmazonLinux Virtual Machine] document and understand how to deploy the application on the virtual machine. We will utilize the virtual machine deployed for FCJ Management for large-scale deployment and scaling within the Auto Scaling Group.\nAuto Scaling Group An Auto Scaling Group is a collection of EC2 Instances. This group has the ability to automatically adjust the number of EC2 Instance members based on the configured scaling policy.\nLaunch Template A Launch Template is a feature that allows you to create a template for initializing EC2 Instances. This simplifies and streamlines the process of creating EC2 Instances for use with the Auto Scaling service.\nLoad Balancer A Load Balancer is a tool that distributes incoming data traffic to AWS resources, specifically EC2 Instances in this lab, within a designated Target Group.\nTarget Group A Target Group is a set of AWS resource elements that receive data traffic routed by the Load Balancer.\nContents Introduction Preparation Steps Initialize Template Initialize Target Group Initialize Load Balancer Initialize Auto Scaling Group Check Results Resource Cleanup "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduce In this exercise, we will be deploying the application using an Auto Scaling Group to ensure the application\u0026rsquo;s scalability based on user demand. Additionally, we will implement a Load Balancer to distribute the load and manage user access requests to our Application Tier.\nBefore proceeding, please review the document [Deploying FCJ Management Application on a Windows/AmazonLinux Virtual Machine] to understand how to deploy the application on a virtual machine. We will utilize the virtual machine where FCJ Management is deployed for the purpose of mass deployment and scaling within the Auto Scaling Group.\nAuto Scaling Group An Auto Scaling Group is a collection of EC2 Instances that can dynamically adjust the number of its members according to the defined scaling policy.\nLaunch Template A Launch Template is a feature that allows you to create a template for initializing EC2 Instances. This simplifies and streamlines the process of creating EC2 Instances for use within the Auto Scaling service.\nLoad Balancer A Load Balancer is a tool used to evenly distribute incoming data traffic to AWS resources, specifically EC2 Instances in this lab, within the Target Group.\nTarget Group A Target Group refers to a collection of AWS resource components that will receive and process data traffic routed through the Load Balancer.\nIn this exercise, our focus is on deploying the application through the Auto Scaling Group to ensure scalability as per user requirements. We will also implement a Load Balancer to efficiently manage load distribution and coordinate user access to our Application Tier.\nPrior to proceeding, it is recommended that you thoroughly review the documentation titled \u0026ldquo;Deploying FCJ Management Applications on Windows/AmazonLinux Virtual Machines\u0026rdquo; to gain a clear understanding of deploying the application on a virtual machine. The FCJ Management deployed virtual machine will be utilized for extensive deployment and scaling within the Auto Scaling Group.\n"
},
{
	"uri": "/2-prerequiste/2.2-createsecuritygroup/",
	"title": "Create Security Group",
	"tags": [],
	"description": "",
	"content": "Create a Security Group for FCJ Management We will create a Security group for the application.\nIn the VPC interface, select Security Group Select Create security group Perform Security Group configuration\nSecurity group name, enter FCJ-Management-SG Description, enter Security Group for FCJ Management VPC, select the newly created VPC. Configure Inbound rules\nFirst configure SSH port 22 and Source: MyIP to be able to access the instance. Next is HTTP port 80. Custom TCP port 5000 for FCJ Management HTTPS port 443. Check Outbound rules and select Create security group Finish creating Security Group for FCJ Management application. Check Security Group details. "
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Preparation In this exercise, we need to prepare some services to be able to deploy the FCJ Management application using Auto Scaling Group with Elastic Load Balancer. In general, we will deploy the ShareNote application according to the following architecture:\nContent Create VPC Create Security Group for FCJ Management instance Create Security Group for DB instance Create DB Subnet Group Create DB instance Create EC2 instance Connect EC2 instance Connect DB instance Deploy Application Initialize AMI from Virtual Machine "
},
{
	"uri": "/2-prerequiste/2.3-createsgdb/",
	"title": "Create Security Group DB",
	"tags": [],
	"description": "",
	"content": "Create a Security Group for the Database Instance Create a Security Group for the Database instance. To ensure security, avoid configuring the application\u0026rsquo;s Security Group together.\nSelect Security Group Select Create security group Configure the Security Group settings:\nSecurity Group name: Enter FCJ-Management-DB-SG Description: Enter Security Group for DB instance Select the newly created VPC Set up Inbound rules:\nSelect Add rule Select MYSQL/Aurora port 3306 Set Source as FCJ-Management-SG Select Create security group Complete the creation of the Security Group for the database. "
},
{
	"uri": "/3-launchtemplate/",
	"title": "Launch Template",
	"tags": [],
	"description": "",
	"content": "Launch Template In this section, you will create a Launch Template using the AMI you created from the Amazon Linux 2 Instance in the previous step.\nAccess to EC2\nSelect Launch Templates Select Create launch template In the Create launch template interface\nLaunch template name, enter FCJ-Management-template Template version description, enter Template for FCJ Management Perform AMI selection\nSelect My AMIs Select Owned by me Select FCJ-Management-AMI Make Instance type selection\nSelect t2.micro Key pair, select aws-fcj-key created when creating EC2 instance. Configure Network\nSubnet, select public subnet Firewall (Security Group), select Select existing security group Select FCJ-Management-SG Check again and execute Create launch template Execute successfully and select View launch templates View the template just created. "
},
{
	"uri": "/2-prerequiste/2.4-createdbsubnetgroup/",
	"title": "Create DB Subnet Group",
	"tags": [],
	"description": "",
	"content": "Create DB Subnet Group Go to RDS\nSelect Subnet groups Select Create DB subnet group In the Create DB subnet group interface\nName, enter FCJ-Management-Subnet-Group Description, enter Subnet Group for FCJ Management Select the created VPC. Configure subnet\nSelect the AZ Select subnet Select Create Successfully create DB Subnet Group "
},
{
	"uri": "/4-launchtargetgroup/",
	"title": "Create Target Group",
	"tags": [],
	"description": "",
	"content": "Create Target Group Access EC2 interface: Select Target Groups Select Create target group Make a configuration: Select Instances On the Specify group details page, set the following parameters for target group: Target group name: Enter the name of the target group (e.g., FCJ-Management-TG). Protocol: HTTP. Port: 5000 (Port used by FCJ Management). Leave the remaining items as default. Select Next In the Available instances interface: Select FCJ-Management instance Select port 5000 Select Include as pending below (if not selected, accessing with DNS Load Balancer may result in an HTTP 503: Service unavailable error) Review Select Create target group In the Register pending targets only interface, select Continue Finish creating the Target group "
},
{
	"uri": "/2-prerequiste/2.5-createdbinstance/",
	"title": "Create DB instance",
	"tags": [],
	"description": "",
	"content": "Create DB instance Go to AWS Management Console\nFind RDS Select RDS In RDS interface\nSelect Databases Select Create database Choose the method to create database\nSelect Standard create Configure Engine database\nSelect MySQL Configure Template\nSelect Production For Availability and durability, select Multi-AZ DB instance Next, make detailed settings\nDB instance identifier, enter fcj-management-db-instance Master user, enter admin Master password, enter your choice (in the lab, enter 123Vodanhphai) Confirm password, enter the password again. Perform network configuration for db instance\nNetwork type, select IPv4 VPC, select asg-vpc created Subnet group, select the created subnet group. VPC security group, Select Choose existing Security Group, select FCJ-Management-DB-SG (to avoid confusion with web SG). Initialize Database with the name awsuer, leave the rest to default. Note: In the Deletion protection option, the default value is Enable, which helps protect the database from being accidentally deleted. However, in this lab, we Disable Deletion protection for easier resource cleanup at the end of the lab.\nCheck again and select Create database Initialize DB instance in 10 minutes. When Status changes to Available, it\u0026rsquo;s done.\nSelect the db instance just created. In the Connectivity \u0026amp; security interface\nStore the value of Endpoint Check port 3306 "
},
{
	"uri": "/5-launchloadbalancer/",
	"title": "Create Load Balancer",
	"tags": [],
	"description": "",
	"content": "Create Load Balancer Access to EC2\nSelect Load Balancers Select Create Load Balancer Section Load balancer types\nSelect HTTP/HTTPS Select Create In the Create Application Load Balancer interface\nLoad balancer name, enter FCJ-Management-LB Scheme, select Internet-facing IP address type, select IPv4 Configure Network mapping\nVPC, select the VPC created in the lab. Mapping, select ap-southeast-1a and ap-southeast-1b Select subnet Configure security group, select FCJ-Management-SG.\nSection Listeners and routing, in Default actions select FCJ-Management-TG Check again and select Create load balancer Create Application Load Balancer successfully and select View load balancer In the Load Balancer interface. The Load Balancer creation process will take about 5-10 minutes to complete. You can check the status change from provisioning to active in the Load Balancer list.\nSelect FCJ-Management-LB Copy DNS name of Load Balancer. Access by pasting DNS name into the browser. However, at the moment we only have a single EC2 server. Next, we will proceed to configure the Auto Scaling Group feature, which will automatically increase the number of our EC2 instances when the traffic is high.\n"
},
{
	"uri": "/6-launchautoscalinggroup/",
	"title": "Create Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Create Auto Scaling Group In this section, we will implement an Auto Scaling Group for the FCJ Management application to ensure our application will be deployed with high availability and potentially increase the number of EC2 instances when users visit, into the boost system.\nAccess to EC2\nSelect Auto Scaling Groups Select Create Auto Scaling group Auto Scaling Group name, enter FCJ-Management-ASG Configure the template\nLaunch template, select FCJ-Management-template Select Next Configure Network\nVPC, select created. Select AZ and subnet Select Next Configure Load balancing\nSelect Attach to an existing load balancer Select Choose from your load balancer target groups Select FCJ-Management-TG Select Next Configure group size and scaling policy.\nDesired capacity: Enter 1. (Default) Minimum capacity: Enter 1. (Default) Maximum capacity: Enter 3. Under Scaling policies - optional: Select this exercise to make it easier for the next step to be checked. You can completely set the resource scaling policy according to your needs.\nSelect Target tracking scaling policy Scaling policy name, enter Target Tracking Policy Metric type, select Application Load Balancer request count per target. Target group, enter FCJ-Management Target value, enter 30 Select Next Select Create a topic. Configure Add notifications. Select Next Check email and Confirm subscription Select Create Auto Scaling group Complete creation Auto Scaling groups The initialization of the Auto Scaling Group will be done, the newly created Auto Scaling Group will be displayed in the list, and you can select it to view detailed information.\nWe can track existing EC2 instances in the Auto Scaling Group on the Instance management page. Instances with InService status are ready-to-go instances. "
},
{
	"uri": "/2-prerequiste/2.6-createec2/",
	"title": "Create EC2 instance",
	"tags": [],
	"description": "",
	"content": "Create EC2 instance Go to AWS Management Console\nFind EC2 Select EC2 In the EC2 interface\nSelect Instances Select Launch instances Name instance, enter FCJ-Management Made for AMI\nSelect Quick Start\nSelect Amazon Linux\nSelect Instance type\nSelect t2.micro Select Create new key pair Configure key pair. Configure Network VPC, select the created VPC. Subnet, select Public subnet Check if Auto-assign public IP?. If you have not reviewed the step of allocating public IP in the step of creating VPC. Select Select existing security group and then select FCJ-Management-SG Select Launch instance Successfully initialized instance and select View all instances View instance details and note Public IPv4 address to make the connection in the next step. "
},
{
	"uri": "/7-result/",
	"title": "Check the result",
	"tags": [],
	"description": "",
	"content": "Check the result In this exercise, we will test access to ShareNote and proceed to increase the number of access requests to the application by opening multiple connections simultaneously using Webserver Stress Tool 8. Click here Webserver Stress Tool 8 to download.\nDownload Webserver Stress Tool 8 Test the self-scalability of the deployed FCJ Management application\nExtract the zip file and install Webserver Stress Tool 8 with default options. Start Webserver Stress Tool 8 to proceed to create a large amount of access to the Endpoint of the Load Balancer. Click on the Test Type tab and enter the parameters as shown below: Run Unit : 100000 Number of Users : 101 Click Delay : 1 Click the URLs tab, copy the DNS name of the FCJ Management application into the URL box (the DNSName when you created the Load Balancer in step 5. Initialize the Load Balancer), and click Start Test After some time, check the response of the Auto Scaling Group. We see the number of instances is increased to the maximum number that we set to 3. Check that access to the application from the browser is not interrupted. View logfile results See how EC2 looks when running the application. Congratulations on completing the FCJ Management practice session with Auto Scaling Group and Elastic Load Balancer.\nYou will receive an email notification.\n"
},
{
	"uri": "/2-prerequiste/2.7-connectec2/",
	"title": "Connecting EC2 instances",
	"tags": [],
	"description": "",
	"content": "Connect EC2 instance Use MobaXterm to SSH into the instance via port 22.\nSelect Session In the Session settings section,\nRemote host, enter Public IPv4 address of the instance Specify username, enter ec2-user Check port 22 Select Advanced SSH settings Select Use private key and select keypair of the instance. Select OK Follow the instructions in the figure. EC2 instance connection was successful. Install node version manager (nvm) ) by typing the following in the following command line: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash Enable nvm by typing the following in the command line and Use nvm to install the latest version of Node.js by typing the following in the command line. . ~/.nvm/nvm.sh\rnvm install 16 Check nodejs is installed successfully node -v\rnpm -v "
},
{
	"uri": "/8-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources We will clean up resources in the following order:\nRemove Auto Scaling Group: Access EC2 Management Console On the left navigation bar, select Auto Scaling Groups Select Auto Scaling Group related to the lab. Click Delete Type delete in the empty box and press delete Remove Load Balancer: Access EC2 Management Console On the left navigation bar, select Load Balancers Select Load Balancer related to the lab. Click Actions. Click Delete. Remove Target Group: Access EC2 Management Console On the left navigation bar, select Target Groups Select Target Group related to the lab. Click Actions. Click Delete. Click Yes, delete Delete Launch Template: Access EC2 Management Console On the left navigation bar, select Launch Templates Select Launch Template related to the lab. Click Actions. Click Delete template Type delete in the empty box and press delete Delete AMI: Access EC2 Management Console On the left navigation bar, select AMIs Select AMI related to the lab. Click Actions. Click Deregister. Click Continue. Terminate EC2 instance Access EC2 Management Console On the left navigation bar, select Instances Select all EC2 Instances related to the lab. Click Actions. Click Manage Instance State. Select Terminate. Click Change State. Delete DB Instance Access the RDS Management Console On the left navigation bar, select Databases Select all DB Instances related to the lab. Click Actions. Click Delete Uncheck Create final snapshot? and select \u0026ldquo;I acknowledge that upon instance deletion, automated backups, including system snapshots and point-in-time recovery, will no longer be available\u0026rdquo; Type delete me in the empty box. Click Delete Delete Security Group Access EC2 Management Console On the left navigation bar, select Security Groups Select all Security Groups related to the lab. Click Actions. Click Delete security groups Click Delete "
},
{
	"uri": "/2-prerequiste/2.8-connectdbinstance/",
	"title": "Connect DB instance",
	"tags": [],
	"description": "",
	"content": "Connect DB instance Use user root privileges sudo su Install MySQL command-line client yum install mariadb Check the installation is successful mysql --version Connect from MySQL command-line client (unencrypted)\nFor the -h parameter, replace the DNS name (endpoint) for the DB instance For the -P parameter, substitute the port for the DB instance. (3306) For the -u parameter, replace it with master user Enter master user password mysql -h db-instance.crmmitoajvxx.us-east-1.rds.amazonaws.com -P 3306 -u admin -p DB instance connection successful. Check the databases in the instance with the command that will print out a list of all the databases. SHOW DATABASES; Select the database to make changes to using USE. USE \u0026lt;created database\u0026gt;; Create a table in the awsuser database with the CREATE TABLE command. CREATE TABLE `awsfcjuser`.`user` ( `id` INT NOT NULL AUTO_INCREMENT , `first_name` VARCHAR(45) NOT NULL , `last_name` VARCHAR(45) NOT NULL , `email` VARCHAR(45) NOT NULL , `phone` VARCHAR(45) NOT NULL , `comments` TEXT NOT NULL , `status` VARCHAR(10) NOT NULL DEFAULT \u0026#39;active\u0026#39; , PRIMARY KEY (`id`)) ENGINE = InnoDB; Verify that the table is created with the DESCRIBE . command DESCRIBE user; Insert information into the data table with the INSERT INTO command INSERT INTO `user` (`id`, `first_name`, `last_name`, `email`, `phone`, `comments`, `status`) VALUES\r(NULL, \u0026#39;Amanda\u0026#39;, \u0026#39;Nunes\u0026#39;, \u0026#39;anunes@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Alexander\u0026#39;, \u0026#39;Volkanovski\u0026#39;, \u0026#39;avolkanovski@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Khabib\u0026#39;, \u0026#39;Nurmagomedov\u0026#39;, \u0026#39;knurmagomedov@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Kamaru\u0026#39;, \u0026#39;Usman\u0026#39;, \u0026#39;kusman@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Israel\u0026#39;, \u0026#39;Adesanya\u0026#39;, \u0026#39;iadesanya@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Henry\u0026#39;, \u0026#39;Cejudo\u0026#39;, \u0026#39;hcejudo@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Valentina\u0026#39;, \u0026#39;Shevchenko\u0026#39;, \u0026#39;vshevchenko@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Tyron\u0026#39;, \u0026#39;Woodley\u0026#39;, \u0026#39;twoodley@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Rose\u0026#39;, \u0026#39;Namajunas \u0026#39;, \u0026#39;rnamajunas@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Tony\u0026#39;, \u0026#39;Ferguson \u0026#39;, \u0026#39;tferguson@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Jorge\u0026#39;, \u0026#39;Masvidal \u0026#39;, \u0026#39;jmasvidal@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Nate\u0026#39;, \u0026#39;Diaz \u0026#39;, \u0026#39;ndiaz@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Conor\u0026#39;, \u0026#39;McGregor \u0026#39;, \u0026#39;cmcGregor@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Cris\u0026#39;, \u0026#39;Cyborg \u0026#39;, \u0026#39;ccyborg@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Tecia\u0026#39;, \u0026#39;Torres \u0026#39;, \u0026#39;ttorres@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Ronda\u0026#39;, \u0026#39;Rousey \u0026#39;, \u0026#39;rrousey@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Holly\u0026#39;, \u0026#39;Holm \u0026#39;, \u0026#39;hholm@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;),\r(NULL, \u0026#39;Joanna\u0026#39;, \u0026#39;Jedrzejczyk \u0026#39;, \u0026#39;jjedrzejczyk@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;); Use the SELECT command to display the table: SELECT * FROM user; Use exit to leave. Add If cannot disconnect from DB instance, use Ctrl+C "
},
{
	"uri": "/2-prerequiste/2.9-deployapp/",
	"title": "Deploying FCJ Management Application",
	"tags": [],
	"description": "",
	"content": "Deploy FCJ Management application We use git to clone the source code. First of all, install git with the following command: sudo yum install git Use the git init command used to create and initialize a new Git repository (Git Repo) locally. git init Make a clone of the application code repository git clone https://github.com/First-Cloud-Journey/000004-EC2.git Go to the directory of the lab 000004-EC2 cd 000004-EC2 NPM stands for Node package manager is a tool to create and manage Javascript programming libraries for Node.js. Using npm init to initialize the project will generate a sample package.json file. npm init If you do not have Nodejs installed, you can refer to Install Nodejs on Amazon Linux Next we do the dependencies installation\nexpress Dotenv express-handlebars body-parser mysql npm install express dotenv express-handlebars body-parser mysql Do the test and create a .env file that uses vi to configure the database. Create .env file using touch .env command Use vi to open configuration. Perform database configuration DB_HOST = \u0026#39;db-instance.crmmitoajvxx.us-east-1.rds.amazonaws.com\u0026#39;\rDB_NAME = \u0026#39;awsfcjuser\u0026#39;\rDB_USER = \u0026#39;admin\u0026#39;\rDB_PASS = \u0026#39;123Vodanhphai\u0026#39; In which, DB_HOST is the Endpoint of the DB instance DB_NAME is the name of the database created in the DB instance DB_USER is the database username that was created in the DB instance DB_PASS is the database password created in the DB instance Restart the Express server. Use Nodemon to save time npm install --save-dev nodemon Start the local server npm start Access to EC2 Select Instances Select FCJ-Management instance Copy Public IPv4 address Use the browser and paste the Public IPv4 address and port to test the application. Syntax \u0026lt;Public IPv4 address\u0026gt;:5000 Example: 3.91.32.39:5000 "
},
{
	"uri": "/2-prerequiste/2.10-createami/",
	"title": "Launch AMI from Virtual Machine",
	"tags": [],
	"description": "",
	"content": "Launch AMI from Virtual Machine In this step, you will initialize an Amazon Machine Image (AMI) for the Amazon Linux Instance that was set up in the previous step. An AMI is a configuration snapshot of an EC2 Instance that allows you to deploy multiple EC2 Instances with the same configuration as the original EC2 Instance. AMI is commonly used inside Launch Template to template EC2 Instances.\nAccess to EC2\nSelect Instances Select FCJ-Management instance Select Actions Select Image and templates Select Create image Configure Template\nImage name, enter FCJ-Management-AMI Image description, enter AMI for FCJ-Management Select Create image AMI initialization takes about 5 minutes. After 5 minutes, we see Status switch to Available We have completed the preparation steps for deploying FCJ Management with the Auto Scaling Group.\nIn the next section, we will begin to initialize and deploy the main content of this exercise.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]