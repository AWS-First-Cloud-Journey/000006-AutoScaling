[
{
	"uri": "//localhost:1313/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Trong bài thực hành này, chúng ta sẽ tiến hành triển khai ứng dụng sử dụng Auto Scaling Group để đảm bảo khả năng mở rộng linh hoạt theo nhu cầu của người dùng. Chúng ta cũng sẽ triển khai Load Balancer để cân bằng tải và phân phối yêu cầu truy cập từ người dùng đến Application Tier.\nℹ️ Information: Hãy đảm bảo bạn đã tham khảo tài liệu Triển khai Ứng dụng FCJ Management trên Máy ảo Windows/AmazonLinux và hiểu cách triển khai ứng dụng trên máy ảo. Chúng ta sẽ sử dụng máy ảo FCJ Management đã triển khai để thực hiện việc triển khai và mở rộng trong Auto Scaling Group.\nAuto Scaling Group Tại sao cần sử dụng Auto scaling group?\nKhi ứng dụng của chúng ta đưa vào hoạt động, lượng người truy cập sẽ thay đổi theo thời gian, do đó chúng ta cần thường xuyên thay đổi (scaling) lượng instance nhằm nâng cao tính sẵn sàng và tiết kiệm chi phí. Để tự động hóa và linh hoạt trong công việc scaling, chúng ta sẽ có giải pháp là Auto Scaling Group.\nSơ lược về Auto Scaling Group\nℹ️ Information: Amazon EC2 Auto Scaling Group (ASG) giúp tự động điều chỉnh số lượng EC2 instances theo nhu cầu của ứng dụng. ASG có thể tự động mở rộng (scale out) khi lưu lượng tăng, hoặc thu nhỏ (scale in) khi lưu lượng giảm, giúp tối ưu hóa tài nguyên và giảm chi phí. Nó cũng giúp đảm bảo tính sẵn sàng cao bằng cách phân phối instances qua nhiều Availability Zones để duy trì hoạt động liên tục ngay cả khi một phần của hệ thống gặp sự cố.\nCác loại Scaling trong ASG\nTrong nội dung này, chúng ta sẽ tìm hiểu về các loại Scaling sau đây:\nManual Scaling: Người dùng tự tay điều chỉnh số lượng EC2 instances trong Auto Scaling Group dựa trên yêu cầu. Đây là phương pháp thủ công, không tự động dựa trên chỉ số cụ thể.\nDynamic Scaling: Tự động điều chỉnh số lượng instances dựa trên các chỉ số thời gian thực như CPU utilization, network traffic, hoặc custom metrics từ Amazon CloudWatch. Dynamic scaling có 3 chính sách chính:\nTarget Tracking Scaling: Duy trì một giá trị mục tiêu cho metric cụ thể Step Scaling: Điều chỉnh dựa trên ngưỡng metric với các bước tăng/giảm khác nhau Simple Scaling: Điều chỉnh dựa trên một ngưỡng đơn giản Scheduled Scaling: Cho phép chúng ta cấu hình các thời gian cụ thể để tự động mở rộng hoặc thu nhỏ instances, ví dụ như tăng số lượng instances vào giờ cao điểm hoặc giảm xuống ngoài giờ làm việc. Phù hợp cho các trường hợp mà chúng ta đã biết trước mô hình lưu lượng truy cập.\nPredictive Scaling: Sử dụng machine learning để dự đoán hoạt động bằng cách phân tích load data trong lịch sử để tìm các mẫu hàng ngày hoặc hàng tuần trong luồng lưu lượng truy cập. Nó sử dụng thông tin này để dự báo nhu cầu công suất trong tương lai để Amazon EC2 Auto Scaling có thể chủ động tăng công suất của Auto Scaling Group để phù hợp với dự kiến.\n💡 Pro Tip: Kết hợp Predictive Scaling với Dynamic Scaling để đạt hiệu quả tối ưu - Predictive Scaling chuẩn bị trước cho các mẫu lưu lượng đã biết, trong khi Dynamic Scaling xử lý các biến động không lường trước được.\nLaunch Template ℹ️ Information: Launch Template là một cấu hình chứa các thông số cần thiết để khởi chạy EC2 instances. Nó lưu trữ các chi tiết như loại instance, AMI (Amazon Machine Image), key pair, network settings, security groups, và các thông tin khác về cấu hình của EC2. Nhằm đơn giản hóa việc tạo instance, hỗ trợ trong việc tự động tạo mới các instance trong ASG.\n🔒 Security Note: Launch Templates hỗ trợ quản lý phiên bản, cho phép bạn duy trì nhiều phiên bản cấu hình khác nhau và kiểm soát chặt chẽ các thay đổi, giúp tăng cường bảo mật và tuân thủ.\nElastic Load Balancer ℹ️ Information: Elastic Load Balancer (ELB) là một dịch vụ giúp phân phối đều tải công việc (traffic) đến nhiều máy chủ hoặc instances để đảm bảo hệ thống hoạt động ổn định và tránh quá tải cho bất kỳ một máy chủ nào. Nó giúp tối ưu hiệu suất, tăng tính sẵn sàng và đảm bảo rằng nếu một máy chủ gặp sự cố, lưu lượng sẽ được chuyển hướng tới các máy chủ khác mà không ảnh hưởng đến người dùng.\nAWS cung cấp ba loại Load Balancer:\nApplication Load Balancer (ALB): Tối ưu cho HTTP/HTTPS traffic, hoạt động ở tầng ứng dụng (Layer 7) Network Load Balancer (NLB): Xử lý traffic ở tầng vận chuyển (Layer 4), phù hợp cho các ứng dụng yêu cầu hiệu suất cực cao Gateway Load Balancer (GWLB): Dùng để triển khai và quản lý các thiết bị mạng ảo Target Group ℹ️ Information: Target Group là một thành phần của Elastic Load Balancer (ELB), dùng để xác định và quản lý các EC2 instances, IP addresses, Lambda functions, hoặc các container mà Load Balancer sẽ phân phối lưu lượng truy cập đến. Target Group cũng định nghĩa các health check để đảm bảo traffic chỉ được gửi đến các targets khỏe mạnh.\n⚠️ Warning: Cấu hình health check không phù hợp có thể dẫn đến việc loại bỏ các instances khỏe mạnh hoặc giữ lại các instances có vấn đề trong Target Group. Hãy đảm bảo thiết lập các ngưỡng timeout, interval và threshold phù hợp với đặc điểm ứng dụng của bạn.\n"
},
{
	"uri": "//localhost:1313/vi/7-test-solutions/7.1-test-manual-scaling-solution/",
	"title": "Kiểm thử giải pháp manual scaling",
	"tags": [],
	"description": "",
	"content": "Manual Scaling ℹ️ Information: Manual Scaling là phương pháp điều chỉnh thủ công thông số Desired capacity của Auto Scaling Group (ASG). Sau khi điều chỉnh và xác nhận cập nhật, ASG sẽ tự động khởi tạo hoặc xóa EC2 Instance dựa trên giá trị Desired capacity mới.\nCài đặt kiểm thử Khi tạo xong Auto Scaling Group, dịch vụ này sẽ tự động khởi tạo một EC2 Instance theo cấu hình đã thiết lập. Để xác nhận điều này, chúng ta có thể vào EC2 Console:\nChọn Load Balancer Chọn tab Resource map - new Tại đây, chúng ta có thể thấy Target Group đang liên kết với 2 Targets (EC2 Instances): một instance gốc được tạo trước đó và một instance được tạo từ ASG.\n💡 Pro Tip: Resource Map là công cụ trực quan giúp bạn dễ dàng theo dõi mối quan hệ giữa Load Balancer, Target Group và các EC2 Instance, đặc biệt hữu ích khi làm việc với Auto Scaling.\nTiếp theo, chúng ta sẽ kiểm thử với ứng dụng đã tải trước đó:\nMở ứng dụng, chọn tab Test Type Test Type: Chọn CLICKS Run until: 100000 User Simulation Number Of Users: 1000 Click Delay: 1 seconds Trong tab URLs, cấu hình các thông tin:\nName: Manual Scaling Test (bạn có thể đặt tên tùy ý, vì chúng ta sẽ sử dụng lại cho các loại scaling khác sau này) URL: Dán DNS của Load Balancer vào đây Trên thanh công cụ, nhấn Start Test để bắt đầu.\nTiến hành kiểm thử Quay lại AWS Management Console, vào EC2 Console:\nTích chọn 2 EC2 Instance trong target group Chọn tab Monitoring và bắt đầu quan sát ℹ️ Information: Trong phần Monitoring, chúng ta sẽ tập trung vào 5 biểu đồ quan trọng sau:\nCPU Utilization (%): Hiển thị lượng tài nguyên CPU mà mỗi instance đã sử dụng (khoảng dưới 8%) Network in (bytes): Hiển thị dung lượng mạng đi vào mỗi instance (khoảng dưới 2.9 triệu Megabytes) Network out (bytes): Hiển thị dung lượng mạng đi ra từ mỗi instance (khoảng dưới 17.3 triệu Megabytes) Network packets in (count): Hiển thị số lượng gói tin đi vào mỗi instance (khoảng dưới 6.85 nghìn gói tin) Network packets out (count): Hiển thị số lượng gói tin đi ra từ mỗi instance (khoảng dưới 7.36 nghìn gói tin) Từ giờ trở đi chúng ta sẽ đọc các biểu đồ này như vậy. Bao gồm các thông số quan trọng ở cột dọc, cột ngang và các đường vẽ. Từ đây sẽ giúp chúng ta hiểu hơn về cách Load Balancer cân bằng lưu lượng mạng tới cho các instance ở trong Target Group.\nNếu bạn chỉ tích chọn 1 instance, thì trên biểu đồ chỉ có một đường vẽ đại diện cho instance đó. Khi tích chọn càng nhiều instance trên danh sách, sẽ càng có nhiều đường biểu diễn hơn.\nĐiều chỉnh thủ công thông số Desired capacity của ASG Trở lại trang thông tin chi tiết của ASG đã tạo trước đó. Trong phần Group details, chúng ta thấy: Desired capacity = 1.\nℹ️ Information: Giả sử một tình huống đã qua giờ cao điểm và chúng ta muốn tắt bớt một instance để tiết kiệm chi phí. Để thực hiện, chúng ta sẽ điều chỉnh thủ công thông số Desired capacity = 0. Nhấn Edit.\n⚠️ Warning: Khi giảm Desired capacity xuống 0, tất cả các instance do ASG quản lý sẽ bị chấm dứt. Đảm bảo rằng đây là hành động có chủ đích và sẽ không ảnh hưởng đến tính khả dụng của ứng dụng.\nTrong bảng thông tin Group size, điều chỉnh Desired capacity và Min desired capacity về 0 và nhấn Update.\nSau đó vào tab Activity để xem hoạt động của ASG.\nTrong quá trình instance đang được tắt đi, bạn có thể tạm dừng chương trình test.\nℹ️ Information: Như vậy, chúng ta có thể thấy ASG sẽ tự động hủy instance theo thông số đã được cấu hình.\nSau vài phút, vào lại trang thông tin của Load Balancer, chọn tab Resource map - new, chúng ta sẽ thấy giờ chỉ còn một target.\nTới bước này, hãy BẬT LẠI chương trình test.\nℹ️ Information: Chúng ta cũng sẽ nhận được email thông báo từ Amazon SNS về việc ASG đã chấm dứt instance.\n💡 Pro Tip: Thông báo SNS giúp bạn theo dõi các hoạt động của ASG trong thời gian thực, đặc biệt hữu ích khi triển khai các chiến lược scaling trong môi trường sản xuất.\nKhi chương trình đang có lưu lượng truy cập lớn, các thao tác sẽ bị chậm đi. Bạn có thể mở ứng dụng thông qua DNS của Load Balancer để kiểm thử.\nQuay lại EC2 Console, chọn target còn lại và quan sát biểu đồ.\nℹ️ Information: Có thể thấy, hiện tại instance đang phải chịu tải lưu lượng mạng vào và ra gần như gấp đôi, và lượng tài nguyên CPU đã sử dụng gần gấp 4 lần so với trước đó.\nKết luận 💡 Pro Tip: Trên thực tế, các hệ thống sẽ có các quy trình xử lý phức tạp hơn, thời gian xử lý lâu hơn, do đó sẽ tiêu tốn nhiều tài nguyên CPU hơn. Trong bài lab này, chúng ta chỉ kiểm tra giao thức GET đơn giản, trong khi các ứng dụng thực tế sẽ có các request phức tạp hơn nhiều.\n🔒 Security Note: Khi thực hiện manual scaling trong môi trường sản xuất, cần đảm bảo rằng việc giảm số lượng instance không ảnh hưởng đến khả năng xử lý của hệ thống và không tạo ra các điểm yếu về bảo mật do quá tải.\n"
},
{
	"uri": "//localhost:1313/vi/4-setup-load-balancer/4.1-create-target-group/",
	"title": "Tạo Target Group",
	"tags": [],
	"description": "",
	"content": "Tạo Target Group ℹ️ Information: Target Group là thành phần quan trọng trong kiến trúc Load Balancer của AWS, giúp định nghĩa các đích đến mà Load Balancer sẽ phân phối lưu lượng truy cập. Target Group có thể chứa các EC2 instances, IP addresses, Lambda functions hoặc các container.\nỞ phần giao diện quản lý EC2, ở bảng điều hướng bên trái, hãy kéo xuống phần Load Balancing:\nChọn Target Groups Chọn Create target group Xuất hiện bảng Specify group details, hãy cấu hình như sau:\nỞ phần Basic configuration: Choose a target type: Instances Target group name: FCJ-Management-TG Tiếp tục trong phần Basic configuration: Protocol: Port: HTTP, 5000 IP address type: IPv4 VPC: AutoScaling-Lab Protocol version: HTTP1 Nhấn Next 💡 Pro Tip: Đảm bảo rằng port bạn chọn (5000) khớp với port mà ứng dụng của bạn đang lắng nghe trên EC2 instance. Điều này đảm bảo lưu lượng truy cập được định tuyến chính xác.\nTiếp theo chúng ta tiến hành Register targets:\nỞ phần Available instances: Chọn instance FCJ-Management Ports for the selected instances: 5000 Chọn Include as pending below Ở phần Review targets: Kiểm tra target đã được đăng ký Chọn Create target group ⚠️ Warning: Sau khi tạo Target Group, trạng thái health check của các targets có thể hiển thị là \u0026ldquo;unhealthy\u0026rdquo; trong vài phút đầu tiên. Đây là hành vi bình thường khi hệ thống đang thực hiện kiểm tra sức khỏe ban đầu.\nKết quả Chúng ta đã hoàn thành việc tạo Target Group. Chọn Target Group FCJ-Management-TG vừa khởi tạo để xem thông tin chi tiết.\n🔒 Security Note: Target Group là một phần quan trọng trong việc thiết lập bảo mật cho ứng dụng của bạn. Khi kết hợp với Application Load Balancer, bạn có thể triển khai các quy tắc bảo mật như WAF (Web Application Firewall) để bảo vệ ứng dụng khỏi các mối đe dọa web phổ biến.\nHiểu về Target Group Target Group là một thành phần quan trọng trong kiến trúc Elastic Load Balancing của AWS. Nó đóng vai trò là điểm đích cho các yêu cầu được gửi đến Load Balancer và định nghĩa cách thức kiểm tra sức khỏe của các mục tiêu.\nℹ️ Information: Target Group cho phép bạn nhóm các EC2 instance, IP address, Lambda function hoặc các container lại với nhau để Load Balancer có thể định tuyến lưu lượng đến chúng một cách hiệu quả.\nCác loại Target Group AWS hỗ trợ nhiều loại Target Group khác nhau tùy thuộc vào nhu cầu của ứng dụng:\nInstance-based Target Groups: Định tuyến lưu lượng đến các EC2 instance (như chúng ta đã cấu hình). IP-based Target Groups: Định tuyến lưu lượng đến các địa chỉ IP cụ thể, hữu ích khi làm việc với các container hoặc on-premises servers. Lambda-based Target Groups: Định tuyến yêu cầu đến AWS Lambda functions. ALB-based Target Groups: Định tuyến lưu lượng đến một Application Load Balancer khác. Health Checks Health Check là một tính năng quan trọng của Target Group, giúp đảm bảo lưu lượng chỉ được gửi đến các mục tiêu khỏe mạnh:\nPath: Đường dẫn mà Load Balancer sẽ gửi yêu cầu kiểm tra sức khỏe (mặc định là /). Port: Cổng mà Load Balancer sẽ sử dụng để kiểm tra sức khỏe. Threshold: Số lần kiểm tra liên tiếp thành công/thất bại để xác định trạng thái của mục tiêu. Interval: Khoảng thời gian giữa các lần kiểm tra sức khỏe. Timeout: Thời gian chờ phản hồi từ mục tiêu. 💡 Pro Tip: Cấu hình health check phù hợp là rất quan trọng để đảm bảo tính sẵn sàng cao của ứng dụng. Nên chọn một endpoint cụ thể trong ứng dụng của bạn để kiểm tra sức khỏe thay vì sử dụng trang chủ, vì endpoint này nên kiểm tra các thành phần quan trọng của ứng dụng như kết nối cơ sở dữ liệu.\nTích hợp với Auto Scaling Group Target Group có thể được tích hợp với Auto Scaling Group để tự động đăng ký và hủy đăng ký các instance khi chúng được tạo hoặc kết thúc. Điều này đảm bảo rằng lưu lượng truy cập luôn được định tuyến đến các instance khỏe mạnh và sẵn sàng.\nTrong phần tiếp theo, chúng ta sẽ tạo Application Load Balancer và kết nối nó với Target Group này để hoàn thiện cấu hình cân bằng tải cho ứng dụng của chúng ta.\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation/2.1-setup-network/",
	"title": "Thiết lập hạ tầng mạng",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Truy cập vào AWS Management Console\nTìm VPC Chọn VPC Trong giao diện VPC\nChọn Create VPC Trong giao diện Create VPC\nChọn VPC and more Name, nhập tên VPC của bạn. Trong bài lab này, ta đặt tên là AutoScaling-Lab IPv4 CIDR block, nhập 10.0.0.0/16 Chọn theo hướng dẫn\nSố lượng AZ là 3 Số lượng public subnet là 3 Số lượng private subnet là 3 Nat gateways chọn None Chọn theo hướng dẫn\nVPC endpoints chọn None Chọn Create VPC Cấu hình Auto-assign Public IP cho Public Subnets ℹ️ Information: Để các EC2 instances trong public subnet có thể tự động nhận địa chỉ IP public khi khởi tạo, chúng ta cần bật tính năng auto-assign public IPv4 address.\nChọn Subnets Chọn public subnet Chọn Edit subnet settings Chọn Enable auto-assign public IPv4 address. Sau đó Chọn Save\nKiểm tra đã cấp phát thành công.\n💡 Pro Tip: Lặp lại các bước trên cho tất cả public subnet còn lại để đảm bảo tính nhất quán trong cấu hình mạng.\nTạo Security Group cho ứng dụng FCJ Management ℹ️ Information: Security Group hoạt động như tường lửa ảo để kiểm soát lưu lượng truy cập vào và ra khỏi các tài nguyên AWS của bạn.\nTrong giao diện VPC, chọn Security groups Chọn Create security group Thực hiện cấu hình Security Group\nSecurity group name, nhập FCJ-Management-SG Description, nhập Security Group for FCJ Management VPC, chọn VPC vừa tạo: AutoScaling-Lab Cấu hình Inbound rules\nĐầu tiên cấu hình SSH port 22 với Source: MyIP để có thể truy cập an toàn vào instance Tiếp theo là HTTP port 80 Custom TCP port 5000 dành cho ứng dụng FCJ Management HTTPS port 443 🔒 Security Note: Việc giới hạn truy cập SSH chỉ từ địa chỉ IP của bạn (MyIP) là một biện pháp bảo mật quan trọng để giảm thiểu rủi ro xâm nhập trái phép.\nKiểm tra Outbound rules và chọn Create security group\nTạo Security Group cho Database Instance ℹ️ Information: Để tuân thủ nguyên tắc phân quyền tối thiểu (principle of least privilege), chúng ta nên tạo Security Group riêng cho Database instance.\nCấu hình Security Group:\nSecurity Group name, nhập FCJ-Mangement-DB-SG Description, nhập Security Group for DB instance Chọn VPC vừa tạo Cấu hình Inbound rules:\nChọn Add rule Chọn MYSQL/Aurora port 3306 Sau đó chọn Source là FCJ-Management-SG 🔒 Security Note: Bằng cách chỉ cho phép kết nối từ Security Group của ứng dụng (FCJ-Management-SG), chúng ta đảm bảo rằng chỉ các EC2 instances trong Security Group đó mới có thể kết nối đến database, tăng cường bảo mật cho dữ liệu.\nKiểm tra lại Outbound rules và cuối cùng bấm Create security group\nTổng kết Trong phần này, chúng ta đã hoàn thành việc thiết lập hạ tầng mạng cơ bản cho ứng dụng FCJ Management, bao gồm:\nVPC và Subnet: Tạo môi trường mạng ảo riêng biệt với các subnet phân bố ở nhiều Availability Zone Internet Gateway: Cho phép kết nối từ VPC ra internet Route Table: Cấu hình định tuyến cho các subnet Security Groups: Thiết lập các quy tắc bảo mật cho EC2 instances và RDS database 💡 Pro Tip: Việc phân chia subnet giữa các Availability Zone khác nhau giúp tăng tính sẵn sàng cao cho ứng dụng, đảm bảo hệ thống vẫn hoạt động ngay cả khi một AZ gặp sự cố.\nTrong bước tiếp theo, chúng ta sẽ tiến hành khởi tạo EC2 instance để triển khai ứng dụng FCJ Management.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Triển khai ứng dụng FCJ Management với Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Triển khai ứng dụng FCJ Management với Auto Scaling Group Tổng quan Trong hướng dẫn này, chúng ta sẽ thực hiện triển khai ứng dụng bằng cách sử dụng Amazon EC2 Auto Scaling Group để đảm bảo khả năng mở rộng linh hoạt theo nhu cầu của người truy cập. Ngoài ra, chúng ta cũng sẽ triển khai Elastic Load Balancing để cân bằng tải và phân phối yêu cầu từ người dùng đến Application Tier của ứng dụng.\nℹ️ Information: Hãy đảm bảo bạn đã xem qua tài liệu Triển khai Ứng dụng FCJ Management trên Máy ảo Windows/Amazon Linux để nắm vững cách triển khai ứng dụng trên máy ảo. Chúng ta sẽ cần sử dụng máy ảo FCJ Management đã triển khai để thực hiện việc triển khai đồng loạt và mở rộng trong Auto Scaling Group.\nNội dung Giới thiệu Các bước chuẩn bị Khởi tạo Launch Template Thiết lập Elastic Load Balancer Kiểm thử Khởi tạo Auto Scaling Group Kiểm thử các giải pháp Dọn dẹp tài nguyên Lợi ích của Auto Scaling Group Auto Scaling Group (ASG) mang lại nhiều lợi ích quan trọng khi triển khai ứng dụng trên AWS:\nTính sẵn sàng cao: ASG tự động thay thế các instance bị lỗi, đảm bảo ứng dụng luôn sẵn sàng phục vụ người dùng.\nKhả năng mở rộng linh hoạt: Tự động tăng hoặc giảm số lượng instance dựa trên nhu cầu thực tế, giúp tối ưu chi phí vận hành.\nPhân phối tải hiệu quả: Kết hợp với Elastic Load Balancer, ASG giúp phân phối đều tải giữa các instance, tránh quá tải cho một máy chủ cụ thể.\nTiết kiệm chi phí: Chỉ sử dụng đúng số lượng tài nguyên cần thiết, tránh lãng phí khi lưu lượng truy cập thấp.\nTự động hóa cao: Giảm thiểu sự can thiệp thủ công trong việc quản lý cơ sở hạ tầng.\nTrong workshop này, bạn sẽ được thực hành triển khai và cấu hình các loại scaling khác nhau, từ đó hiểu rõ cách áp dụng ASG vào các tình huống thực tế.\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bài thực hành này, chúng ta cần chuẩn bị một số dịch vụ để có thể tiến hành triển khai ứng dụng FCJ Management sử dụng Amazon EC2 Auto Scaling cùng với Elastic Load Balancing.\nℹ️ Information: Kiến trúc triển khai của ứng dụng FCJ Management sẽ tận dụng các dịch vụ quản lý của AWS để đảm bảo tính sẵn sàng cao và khả năng mở rộng linh hoạt.\nNội dung Thiết lập hạ tầng mạng Khởi tạo EC2 instance Khởi tạo Database instance với Amazon RDS Cài đặt dữ liệu cho database Triển khai máy chủ web Chuẩn bị metric cho Predictive scaling 💡 Pro Tip: Việc chuẩn bị đầy đủ các thành phần cơ sở hạ tầng trước khi triển khai ứng dụng sẽ giúp quá trình triển khai diễn ra suôn sẻ và giảm thiểu các vấn đề có thể phát sinh.\nCác dịch vụ AWS sử dụng trong bài thực hành Trong bài thực hành này, chúng ta sẽ sử dụng các dịch vụ AWS sau:\nAmazon VPC (Virtual Private Cloud): Tạo môi trường mạng ảo riêng biệt để triển khai các tài nguyên AWS.\nAmazon EC2 (Elastic Compute Cloud): Cung cấp máy chủ ảo để chạy ứng dụng FCJ Management.\nAmazon RDS (Relational Database Service): Dịch vụ cơ sở dữ liệu quan hệ được quản lý để lưu trữ dữ liệu ứng dụng.\nAmazon EC2 Auto Scaling: Tự động điều chỉnh số lượng EC2 instances dựa trên nhu cầu thực tế.\nElastic Load Balancing (ELB): Phân phối lưu lượng truy cập đến giữa nhiều EC2 instances.\nAmazon CloudWatch: Giám sát tài nguyên và ứng dụng AWS, thu thập và theo dõi các metrics.\nAWS Systems Manager: Quản lý cấu hình và tự động hóa các tác vụ trên EC2 instances.\nYêu cầu kỹ thuật Để hoàn thành bài thực hành này, bạn cần:\nTài khoản AWS: Có quyền truy cập vào AWS Management Console với đầy đủ quyền để tạo và quản lý các dịch vụ được liệt kê ở trên.\nKiến thức cơ bản: Hiểu biết cơ bản về EC2, VPC, và các dịch vụ AWS khác.\nTrình duyệt web: Chrome, Firefox, hoặc Edge phiên bản mới nhất.\nCông cụ kết nối SSH (tùy chọn): Như PuTTY (Windows) hoặc Terminal (macOS/Linux) để kết nối với EC2 instances.\nKiên nhẫn và tỉ mỉ: Một số bước trong bài thực hành có thể mất thời gian để hoàn thành, đặc biệt là khi chờ các tài nguyên được khởi tạo.\n🔒 Security Note: Trong môi trường thực tế, bạn nên tuân thủ nguyên tắc đặc quyền tối thiểu (principle of least privilege) khi cấp quyền cho người dùng AWS IAM.\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation/2.2-launch-ec2-instance/",
	"title": "Khởi tạo EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Tạo EC2 Instance Truy cập vào AWS Management Console:\nTìm EC2 Chọn EC2 Trong giao diện EC2:\nChọn Launch instances Cấu hình thông tin cơ bản Đặt tên cho instance, nhập FCJ-Management\nChọn Amazon Machine Image (AMI) Thực hiện chọn AMI:\nChọn Quick Start Chọn Amazon Linux Chọn Amazon Linux 2023 AMI ℹ️ Information: Amazon Linux 2023 là phiên bản mới nhất của Amazon Linux, được tối ưu hóa cho workloads trên AWS với hiệu suất cao, thời gian khởi động nhanh và các tính năng bảo mật nâng cao như SELinux được kích hoạt mặc định.\nChọn loại instance và tạo key pair Chọn Instance type:\nChọn t2.micro Chọn Create new key pair Cấu hình key pair:\nĐặt tên là fcj-key Key pair type: RSA Private key format: .pem Bấm Create key pair 🔒 Security Note: Key pair là thành phần quan trọng để bảo mật kết nối SSH đến EC2 instance. Hãy lưu trữ file .pem ở nơi an toàn, đặt quyền truy cập phù hợp (chmod 400 trên Linux/macOS) và không chia sẻ với người khác. AWS không lưu trữ private key, nên nếu bị mất, bạn sẽ cần tạo key pair mới.\nCấu hình mạng Thực hiện cấu hình Network:\nBấm vào nút Edit VPC, chọn VPC đã tạo. Subnet, chọn Public subnet Kiểm tra đã Auto-assign public IP chưa? Nếu chưa, xem lại bước cấp phát public IP ở bước tạo VPC. Cấu hình bảo mật và khởi tạo Tiếp tục:\nChọn Select existing security group rồi chọn FCJ-Management-SG. Chọn Launch instance. 💡 Pro Tip: Sử dụng security group đã được cấu hình sẵn giúp đảm bảo tính nhất quán trong chính sách bảo mật và dễ dàng quản lý quyền truy cập mạng. Bạn có thể áp dụng cùng một security group cho nhiều EC2 instances, giúp đơn giản hóa việc quản lý và cập nhật các quy tắc bảo mật.\nXác nhận khởi tạo thành công Khởi tạo instance thành công.\nℹ️ Information: EC2 instance sẽ mất khoảng 1-2 phút để khởi động hoàn toàn và sẵn sàng cho kết nối SSH. Bạn có thể theo dõi trạng thái của instance trong tab \u0026ldquo;Instance state\u0026rdquo; và đợi đến khi trạng thái chuyển sang \u0026ldquo;Running\u0026rdquo; và kiểm tra \u0026ldquo;Status check\u0026rdquo; đạt 2/2 checks passed.\nKết nối đến EC2 Instance Sau khi EC2 instance đã được khởi tạo thành công và ở trạng thái \u0026ldquo;Running\u0026rdquo;, chúng ta có thể kết nối đến instance bằng SSH.\nĐối với người dùng Windows:\nTải và cài đặt PuTTY từ trang chủ PuTTY nếu bạn chưa có. Sử dụng PuTTYgen để chuyển đổi file .pem thành .ppk: Mở PuTTYgen Chọn \u0026ldquo;Load\u0026rdquo; và tìm file fcj-key.pem đã tải về Chọn \u0026ldquo;Save private key\u0026rdquo; và lưu file .ppk Mở PuTTY và cấu hình: Nhập địa chỉ IP Public của EC2 instance vào trường Host Name Trong mục Connection \u0026gt; SSH \u0026gt; Auth, chọn Browse và tìm đến file .ppk đã tạo Nhập \u0026ldquo;ec2-user\u0026rdquo; khi được yêu cầu username Đối với người dùng macOS/Linux:\nMở Terminal Đặt quyền cho file key: chmod 400 /đường/dẫn/đến/fcj-key.pem Kết nối đến instance: ssh -i /đường/dẫn/đến/fcj-key.pem ec2-user@địa-chỉ-IP-Public 💡 Pro Tip: Bạn cũng có thể sử dụng tính năng EC2 Instance Connect trên AWS Management Console để kết nối đến instance mà không cần cấu hình SSH client. Chỉ cần chọn instance và nhấp vào nút \u0026ldquo;Connect\u0026rdquo;.\n"
},
{
	"uri": "//localhost:1313/vi/7-test-solutions/7.2-test-scheduled-scaling-solution/",
	"title": "Kiểm thử giải pháp scheduled scaling",
	"tags": [],
	"description": "",
	"content": "Scheduled Scaling ℹ️ Information: Scheduled Scaling cho phép bạn cấu hình Auto Scaling Group (ASG) để tự động điều chỉnh số lượng instance theo lịch trình đã định sẵn. Giải pháp này phù hợp với các workload có tính chu kỳ, biến động theo thời gian cụ thể và lặp lại theo quy luật trong thời gian dài.\nVì đã cài đặt phần kiểm thử ở phần trước, chúng ta sẽ tiếp tục sử dụng các thông số cài đặt đó mà không cần cấu hình lại.\nTiến hành cấu hình Truy cập vào trang thông tin chi tiết của ASG đã tạo, chọn tab Automatic scaling, sau đó kéo xuống phần cuối trang:\nTrong phần Scheduled actions, nhấn Create scheduled action:\nĐiền các thông tin vào biểu mẫu như sau:\nName: Rush hour Desired capacity: 1 Min: 1 (💡 Pro Tip: Nên cấu hình là 0 trong môi trường thực tế để tối ưu chi phí) Max: 3 Recurrence: Once (hoặc lựa chọn khác phù hợp với nhu cầu) Time zone: Asia/Ho_Chi_Minh Specific start time: Chọn thời gian gần nhất với thời điểm hiện tại Nhấn Create để hoàn tất Các thông số Desired capacity, Min và Max sẽ ảnh hưởng trực tiếp đến cấu hình tương ứng của ASG. Trong môi trường sản xuất, cần kết hợp nhiều loại scaling và cân nhắc kỹ lưỡng khi thiết lập các thông số này.\nSau khi tạo thành công, bạn sẽ thấy scheduled action mới trong danh sách:\nKiểm thử ⚠️ Warning: Nên bắt đầu chạy chương trình kiểm thử khoảng 5 phút trước khi ASG dự kiến khởi tạo instance theo lịch trình để có thể quan sát đầy đủ hiệu quả của scheduled scaling.\nSau vài phút, khi thời điểm đã đến, vào tab Activity để theo dõi các hoạt động của ASG. Bạn sẽ thấy sự kiện Executing scheduled action Rush hour được kích hoạt đúng thời điểm đã cấu hình, sau đó ASG sẽ khởi tạo instance mới:\nℹ️ Information: Quay lại EC2 Console để quan sát các metrics. Lưu ý rằng các metrics được cập nhật 15 phút một lần. Khi xem biểu đồ CPU Utilization, bạn có thể thấy đoạn gấp khúc và tăng cao từ khoảng 14:30 đến 14:40, đây là thời điểm chúng ta chạy chương trình kiểm thử:\nĐợi thêm vài phút để các metrics được cập nhật đầy đủ, sau đó tích chọn thêm instance vừa được khởi tạo:\n💡 Pro Tip: Để quan sát chi tiết hơn, bạn có thể phóng to biểu đồ bằng cách:\nChọn 1h cho khung thời gian Chọn 1 second cho độ phân giải Với cài đặt này, bạn sẽ thấy rõ hơn sự thay đổi trong hiệu suất hệ thống trước và sau khi instance mới được thêm vào.\nKết luận ℹ️ Information: Trong môi trường thực tế, nhiều hệ thống như sàn giao dịch thường có các thời điểm lưu lượng người dùng tăng cao theo quy luật. Hiện tượng này tương tự như \u0026ldquo;giờ cao điểm\u0026rdquo; trong giao thông - vào những khoảng thời gian nhất định, lượng người tham gia giao dịch tăng đột biến và lặp lại hàng ngày trong thời gian dài. Scheduled Scaling giúp chuẩn bị trước các instance để đáp ứng nhu cầu tăng cao này.\n🔒 Security Note: Mặc dù Scheduled Scaling rất hiệu quả cho các workload có tính chu kỳ, trong thực tế nên kết hợp với các loại scaling khác như Dynamic Scaling để tăng độ tin cậy và khả năng đáp ứng của hệ thống trước các biến động không lường trước được.\n"
},
{
	"uri": "//localhost:1313/vi/4-setup-load-balancer/4.2-create-load-balancer/",
	"title": "Tạo Load Balancer",
	"tags": [],
	"description": "",
	"content": "Tạo Application Load Balancer ℹ️ Information: Application Load Balancer (ALB) là một dịch vụ cân bằng tải thông minh hoạt động ở tầng ứng dụng (Layer 7), cho phép định tuyến lưu lượng truy cập dựa trên nội dung yêu cầu và hỗ trợ nhiều tính năng nâng cao như path-based routing và host-based routing.\nỞ giao diện quản lý EC2, ở bảng điều hướng bên trái:\nChọn Load Balancers Nhấn vào nút Create Load Balancer Xuất hiện bảng Compare and select load balancer type:\nỞ phần Load balancer types: Tại phần Application Load Balancer Chọn Create 💡 Pro Tip: Application Load Balancer là lựa chọn tối ưu cho các ứng dụng web hiện đại, đặc biệt là các ứng dụng microservices hoặc container-based, vì khả năng định tuyến thông minh và hỗ trợ WebSocket.\nTrong bảng Create Application Load Balancer:\nỞ phần Basic configuration: Load balancer name: FCJ-Management-LB Scheme: Internet-facing Load balancer IP address type: IPv4 Ở phần Network mapping: VPC: AutoScaling-Lab Subnet: Chọn Public Subnet ở ap-southeast-1a, ap-southeast-1b, và ap-southeast-1c ⚠️ Warning: Đảm bảo chọn đúng public subnet cho Internet-facing Load Balancer. Việc chọn private subnet sẽ khiến Load Balancer không thể tiếp nhận lưu lượng từ internet.\nỞ phần Security groups: Chọn FCJ-Management-SG Ở phần Listeners and routing: Default action: FCJ-Management-TG 🔒 Security Note: Security group cho Load Balancer nên chỉ cho phép lưu lượng HTTP/HTTPS từ internet, trong khi security group cho EC2 instance nên chỉ cho phép lưu lượng từ Load Balancer, tạo thành một kiến trúc bảo mật nhiều lớp.\nỞ phần Summary, kiểm tra lại các thông tin đã cấu hình cho Load Balancer Nhấn vào nút Create Load Balancer Xác nhận và kiểm tra Load Balancer Sau khi tạo Load Balancer, chọn FCJ-Management-LB để xem thông tin chi tiết:\nℹ️ Information: Sau khi tạo, Load Balancer sẽ cần vài phút để chuyển sang trạng thái \u0026ldquo;active\u0026rdquo;. Trong thời gian này, AWS đang cấp phát và cấu hình các tài nguyên cần thiết cho Load Balancer của bạn.\nTrong phần quản lý Load Balancer đã tạo: Chọn Resource map - new để xem tổng quan liên kết của Load Balancer 💡 Pro Tip: Sử dụng DNS name của Load Balancer (hiển thị trong tab Description) để truy cập ứng dụng của bạn. Không nên sử dụng địa chỉ IP trực tiếp vì AWS có thể thay đổi địa chỉ IP của Load Balancer theo thời gian.\nKiểm tra hoạt động của Load Balancer Để kiểm tra xem Load Balancer đã hoạt động chính xác hay chưa, hãy truy cập vào DNS name của Load Balancer:\nSao chép DNS name từ tab Description của Load Balancer Mở trình duyệt web và dán DNS name vào thanh địa chỉ ⚠️ Warning: Nếu bạn không thể truy cập ứng dụng thông qua Load Balancer, hãy kiểm tra các điểm sau:\nTrạng thái của các EC2 instance trong Target Group (phải là \u0026ldquo;healthy\u0026rdquo;) Cấu hình Security Group của Load Balancer và EC2 instance Health check đã được cấu hình đúng trong Target Group Hiểu về cách hoạt động của Application Load Balancer Application Load Balancer (ALB) hoạt động ở tầng 7 (Application Layer) của mô hình OSI, cho phép nó hiểu và xử lý các yêu cầu HTTP/HTTPS. Dưới đây là quy trình hoạt động cơ bản:\nTiếp nhận yêu cầu: ALB nhận các yêu cầu HTTP/HTTPS từ người dùng. Đánh giá quy tắc: ALB đánh giá các quy tắc listener để xác định cách xử lý yêu cầu. Định tuyến: Dựa trên quy tắc, ALB định tuyến yêu cầu đến target phù hợp trong Target Group. Phân phối tải: ALB sử dụng thuật toán round robin để phân phối yêu cầu đến các target khỏe mạnh. Duy trì phiên: Nếu được cấu hình, ALB có thể duy trì phiên người dùng với cùng một target. 💡 Pro Tip: ALB hỗ trợ path-based routing, cho phép bạn định tuyến các yêu cầu đến các dịch vụ backend khác nhau dựa trên URL path. Ví dụ: /api/* có thể được định tuyến đến API servers, trong khi /static/* có thể được định tuyến đến content delivery servers.\nLợi ích của việc sử dụng Application Load Balancer Định tuyến nâng cao: ALB hỗ trợ định tuyến dựa trên path, host, HTTP header, và query string. Hỗ trợ WebSocket: ALB hỗ trợ giao thức WebSocket cho các ứng dụng real-time. Hỗ trợ HTTP/2: Cải thiện hiệu suất thông qua việc hỗ trợ HTTP/2. Tích hợp với AWS WAF: Bảo vệ ứng dụng khỏi các cuộc tấn công web phổ biến. Sticky Sessions: Duy trì phiên người dùng với cùng một target. Xác thực người dùng: Tích hợp với Amazon Cognito để xác thực người dùng trước khi định tuyến yêu cầu. 🔒 Security Note: Để tăng cường bảo mật, bạn nên cấu hình HTTPS cho Load Balancer bằng cách sử dụng AWS Certificate Manager (ACM) để cung cấp và quản lý SSL/TLS certificates.\nGiám sát Load Balancer AWS cung cấp nhiều công cụ để giám sát hiệu suất của Load Balancer:\nCloudWatch Metrics: Theo dõi các chỉ số như RequestCount, TargetResponseTime, và HTTPCode_ELB_5XX_Count. Access Logs: Ghi lại thông tin chi tiết về các yêu cầu được gửi đến Load Balancer. Request Tracing: Theo dõi các yêu cầu khi chúng đi qua Load Balancer đến các target. 💡 Pro Tip: Thiết lập CloudWatch Alarms để nhận thông báo khi các chỉ số hiệu suất vượt quá ngưỡng bạn đã xác định, giúp bạn phát hiện và giải quyết vấn đề trước khi chúng ảnh hưởng đến người dùng.\nKết luận Chúng ta đã hoàn thành việc thiết lập Application Load Balancer cho ứng dụng FCJ-Management. Load Balancer này sẽ phân phối lưu lượng truy cập đến các EC2 instance trong Target Group, đảm bảo tính sẵn sàng cao và khả năng mở rộng cho ứng dụng của chúng ta.\nTrong phần tiếp theo, chúng ta sẽ tích hợp Load Balancer này với Auto Scaling Group để tạo một hệ thống hoàn chỉnh, có khả năng tự động mở rộng và thu hẹp dựa trên nhu cầu thực tế.\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation/2.3-launch-db-instance/",
	"title": "Khởi tạo Database Instance với Amazon RDS",
	"tags": [],
	"description": "",
	"content": "Tạo DB Subnet Group cho Amazon RDS Truy cập vào AWS Management Console:\nTìm RDS Chọn Aurora and RDS Tiếp tục:\nChọn Subnet groups Chọn Create DB subnet group Trong giao diện Create DB subnet group:\nName, nhập FCJ-Management-Subnet-Group Description, nhập Subnet Group for FCJ Management Chọn VPC đã tạo ℹ️ Information: DB Subnet Group cho phép Amazon RDS triển khai các instance database trên nhiều Availability Zone, đảm bảo tính sẵn sàng cao và khả năng chịu lỗi cho ứng dụng của bạn.\nTiến hành cấu hình subnet:\nChọn các AZ Chọn các Private subnet Chọn Create\nThành công tạo DB Subnet Group với 2 AZ\nTạo Amazon RDS Database Instance Truy cập vào Amazon RDS Console:\nChọn Databases Chọn Create database Chọn phương thức tạo database:\nChọn Standard create Cấu hình Engine database:\nChọn MySQL ℹ️ Information: Amazon RDS for MySQL cung cấp khả năng quản lý đơn giản, hiệu suất cao và khả năng mở rộng cho cơ sở dữ liệu MySQL, giúp bạn tập trung vào phát triển ứng dụng thay vì quản lý cơ sở dữ liệu.\nCấu hình Template:\nChọn Production Chọn Multi-AZ DB instance 💡 Pro Tip: Triển khai Multi-AZ giúp tăng tính sẵn sàng bằng cách tự động tạo và duy trì một bản sao chờ đồng bộ trong một AZ khác. Trong trường hợp bảo trì theo lịch hoặc sự cố AZ, Amazon RDS sẽ tự động chuyển đổi sang bản sao chờ.\nTiếp theo, thực hiện cài đặt chi tiết:\nDB instance identifier, nhập fcj-management-db-instance Master username, nhập admin Chọn sang Self managed Tiếp tục:\nMaster password, nhập tùy ý của bạn (trong bài lab, nhập 123Vodanhphai) Confirm password, nhập lại password một lần nữa 🔒 Security Note: Đảm bảo sử dụng mật khẩu mạnh cho cơ sở dữ liệu trong môi trường sản xuất thực tế. Mật khẩu nên bao gồm ít nhất 8 ký tự với sự kết hợp của chữ hoa, chữ thường, số và ký tự đặc biệt.\nCấu hình chi tiết cho instance:\nChọn db.m5d.large Chọn General Purpose SSD (gp3) Allocated storage nhập vào 20 GB Thực hiện cấu hình Connectivity cho DB instance:\nChọn Don\u0026rsquo;t connect to an EC2 compute resource VPC, chọn AutoScaling-Lab đã tạo Subnet group, chọn subnet group đã tạo Tiếp tục:\nVPC security group, Chọn Choose existing Security Group, chọn FCJ-Management-DB-SG (tránh nhầm lẫn với SG của web) ⚠️ Warning: Đảm bảo rằng Security Group cho RDS chỉ cho phép kết nối từ các EC2 instance trong Auto Scaling Group của bạn. Không mở cổng database ra internet công cộng để tránh các rủi ro bảo mật.\nKhởi tạo Initial Database với tên awsfcjuer, còn lại để mặc định.\nBấm Create database\nDatabase instance đã được tạo thành công.\nℹ️ Information: Quá trình tạo Amazon RDS Database Instance có thể mất từ 5-10 phút. Trong thời gian này, AWS đang cấp phát tài nguyên, thiết lập cấu hình và triển khai cơ sở dữ liệu của bạn.\nChúng ta có được Endpoint và Port như dưới đây.\n💡 Pro Tip: Lưu lại thông tin Endpoint và Port này để sử dụng trong các bước tiếp theo khi cấu hình kết nối từ ứng dụng FCJ Management đến cơ sở dữ liệu. Endpoint này sẽ không thay đổi ngay cả khi RDS instance được khởi động lại.\nTổng kết Trong phần này, chúng ta đã hoàn thành việc khởi tạo và cấu hình Amazon RDS Database Instance cho ứng dụng FCJ Management. Các bước chính bao gồm:\nTạo DB Subnet Group: Phân bổ cơ sở dữ liệu trên nhiều Availability Zone để đảm bảo tính sẵn sàng cao Cấu hình DB Instance: Lựa chọn loại database, phiên bản, và cấu hình phù hợp Thiết lập bảo mật: Áp dụng Security Group chuyên biệt để kiểm soát truy cập Khởi tạo cơ sở dữ liệu: Tạo database ban đầu để sử dụng cho ứng dụng 🔒 Security Note: Amazon RDS cung cấp nhiều tính năng bảo mật như mã hóa dữ liệu, sao lưu tự động, và cập nhật bảo mật. Trong môi trường sản xuất, bạn nên bật tính năng mã hóa dữ liệu và thiết lập lịch sao lưu phù hợp với yêu cầu khôi phục dữ liệu của ứng dụng.\n💡 Pro Tip: Để tối ưu chi phí và hiệu suất, bạn có thể sử dụng Amazon RDS Performance Insights để giám sát và điều chỉnh hiệu suất database mà không cần kiến thức chuyên sâu về quản trị cơ sở dữ liệu.\nTrong bước tiếp theo, chúng ta sẽ tiến hành cài đặt dữ liệu cho database để chuẩn bị cho việc triển khai ứng dụng FCJ Management.\n"
},
{
	"uri": "//localhost:1313/vi/7-test-solutions/7.3-test-dynamic-scaling-solution/",
	"title": "Kiểm thử giải pháp dynamic scaling",
	"tags": [],
	"description": "",
	"content": "Dynamic Scaling ℹ️ Information: Dynamic Scaling là phương pháp tự động điều chỉnh số lượng EC2 Instance dựa trên các metrics được cung cấp bởi Amazon CloudWatch. Auto Scaling Group (ASG) sẽ tự động khởi tạo hoặc kết thúc các instance dựa trên các ngưỡng metric đã được cấu hình. Chúng ta có thể thiết lập ASG để tạo instance mới khi tài nguyên CPU vượt quá 90%, khi lưu lượng mạng tăng cao, hoặc khi số lượng request trên mỗi target vượt quá ngưỡng xác định.\nTùy thuộc vào đặc thù hệ thống và yêu cầu ứng dụng, chúng ta sẽ lựa chọn metric phù hợp để cấu hình. Trong bài lab này, chúng ta sẽ cấu hình Dynamic Scaling dựa trên \u0026ldquo;số lượng request được gửi đến mỗi target\u0026rdquo;.\nTiến hành cấu hình Trước khi bắt đầu kiểm thử, chúng ta sẽ thực hiện scale in thủ công để giảm số lượng instance. Vào tab Activity của ASG để theo dõi quá trình này.\nSau khi đã giảm số lượng instance, chúng ta sẽ cấu hình Dynamic Scaling. Vào tab Automatic scaling:\nNhấn Create dynamic scaling policy để tạo chính sách scaling tự động mới Điền các thông số vào biểu mẫu như sau:\nPolicy type: Target tracking scaling Scaling policy name: Request Over 500 per target Metric type: Application Load Balancer request count per target Target group: FCJ-Management-TG Target value: 500 (requests) Instance warmup: 60 seconds (nên cấu hình cao hơn trong môi trường sản xuất) Nhấn Create để hoàn tất Thông số Instance warmup xác định khoảng thời gian mà một instance mới cần để đạt trạng thái hoạt động ổn định trước khi bắt đầu nhận lưu lượng từ Load Balancer. Khi một instance chuyển sang trạng thái InService, ASG sẽ chờ hết thời gian warmup trước khi đưa instance vào xử lý requests. Việc cấu hình thông số này hợp lý giúp đảm bảo instance có đủ thời gian để khởi động ứng dụng, cài đặt các phụ thuộc, và thiết lập kết nối đến các dịch vụ khác trước khi xử lý lưu lượng người dùng.\nKết quả sau khi tạo chính sách:\nKiểm thử Bắt đầu chạy chương trình kiểm thử để tạo tải:\nVào EC2 Console để theo dõi lưu lượng request đến các EC2 Instance:\nCần chờ một khoảng thời gian để CloudWatch metrics được cập nhật. Sau đó, bạn sẽ thấy các biểu đồ có xu hướng tăng và dần ổn định.\nQuay lại tab Activity của ASG, chúng ta sẽ thấy có 3 instances được tạo. Do lượng request rất lớn, ASG đã tính toán và tạo ra số lượng instance tối đa theo cấu hình Max capacity:\nTrở lại EC2 Console, tích chọn tất cả các instances được tạo ra và quan sát các biểu đồ metrics:\nBạn sẽ thấy đường màu xanh (instance ban đầu) đang dần giảm xuống, trong khi các đường khác (instance mới) đang xuất hiện và nhận lưu lượng.\nCloudWatch metrics thường được cập nhật khoảng 15 phút một lần, vì vậy bạn cần chờ một khoảng thời gian để thấy được kết quả đầy đủ và chính xác.\nGiờ chúng ta sẽ tắt chương trình kiểm thử:\nVào tab Activity của ASG và theo dõi quá trình ASG tự động kết thúc các instance không còn cần thiết. Quá trình này có thể mất một khoảng thời gian.\nKết luận ℹ️ Information: Khi ASG phát hiện hệ thống có dấu hiệu quá tải dựa trên các metrics đã cấu hình, nó sẽ tự động khởi tạo thêm một hoặc nhiều instance để đưa hệ thống về trạng thái ổn định. Tuy nhiên, Dynamic Scaling có độ trễ nhất định do phụ thuộc vào chu kỳ cập nhật của CloudWatch metrics và thời gian khởi tạo instance mới.\n💡 Pro Tip: Để cải thiện khả năng phản ứng của hệ thống trước các đợt tăng tải đột ngột, nên kết hợp Dynamic Scaling với Predictive Scaling. Predictive Scaling giúp ASG dự đoán trước các mô hình lưu lượng và chuẩn bị capacity từ trước, giúp hệ thống phản ứng nhanh hơn với các thay đổi lưu lượng.\n"
},
{
	"uri": "//localhost:1313/vi/3-create-launch-template/",
	"title": "Tạo Launch Template",
	"tags": [],
	"description": "",
	"content": "AMIs và Launch Template ℹ️ Information: AMIs (Amazon Machine Images) lưu trữ các thông tin như hệ điều hành, ứng dụng, và cấu hình của EC2 instance mà chúng được tạo từ đó. Việc tạo AMI đảm bảo rằng khi khởi tạo máy chủ mới, tất cả các instance đều giống nhau và có thể hoạt động ngay lập tức.\nLaunch template là một công cụ mà chúng ta dùng để cấu hình việc khởi tạo các EC2 instance mới thông qua AMI được chỉ định, loại instance, cấu hình mạng, và các tùy chọn bảo mật. Khi cần khởi tạo một hoặc nhiều máy chủ giống nhau, chúng ta chỉ cần sử dụng launch template đã được cấu hình sẵn.\nThiết lập Launch Templates Tạo Amazon Machine Images (AMIs) từ EC2 Ở trong phần giao diện quản lý EC2, ở bảng điều hướng bên trái:\nChọn Instances Chọn instance FCJ-Management Chọn Actions Chọn Image and templates Ấn Create image Trong bảng cấu hình Create AMI, điền các thông tin sau:\nImage name: FCJ-Management-AMI Image description: AMI for FCJ-Management Ấn Create Image Sau khi tạo AMI, kiểm tra AMI vừa tạo:\nChọn AMIs trong bảng điều hướng bên trái Tìm và chọn FCJ-Management-AMI ⚠️ Warning: Quá trình khởi tạo AMI sẽ mất khoảng 3 phút. Sau quá trình khởi tạo, Status của AMI sẽ chuyển sang trạng thái Available.\n💡 Pro Tip: Chúng ta vừa hoàn thành việc tạo một Image để lưu cấu hình của EC2 instance. AMI này sẽ giúp đảm bảo tính nhất quán khi triển khai nhiều instance.\nTạo Launch Templates Ở giao diện quản lý EC2, ở bảng điều hướng bên trái:\nChọn Launch Templates Chọn Create launch template Trong bảng Create launch template, điền các thông tin sau:\nỞ phần Launch template name and description: Launch template name: FCJ-Management-template Template version description: Template for FCJ Management Ở phần Application and OS Image (Amazon Machine Image): Chọn My AMIs Chọn Owned by me Chọn AMI đã tạo FCJ-Management-AMI Ở phần Instance type: Chọn loại Instance t2.micro Ở phần Key pair (login): Chọn Key pair name có tên là fcj-key Ở phần Network settings: Chọn subnet public AutoScaling-Lab-public-ap-southeast-1a Chọn Select existing security group Chọn security group FCJ-Management-SG Cuối cùng, chọn Create launch template 🔒 Security Note: Việc chọn đúng security group là rất quan trọng để đảm bảo các quy tắc truy cập phù hợp cho instance của bạn. Hãy đảm bảo security group chỉ mở các cổng cần thiết.\nKết quả Kiểm tra Launch Template vừa tạo:\nChọn FCJ-Management-template Ở đây chúng ta có thể xem lại cấu hình Launch Template đã tạo 💡 Pro Tip: Launch Template vừa tạo có thể được sử dụng để khởi tạo các EC2 instance riêng lẻ hoặc trong Auto Scaling Group. Bạn cũng có thể tạo nhiều phiên bản của cùng một template để quản lý các thay đổi theo thời gian.\nTùy chỉnh nâng cao cho Launch Template Ngoài các cấu hình cơ bản, Launch Template còn cho phép bạn tùy chỉnh nhiều thông số nâng cao để tối ưu hóa hiệu suất và chi phí cho các EC2 instance trong Auto Scaling Group.\nSử dụng User Data User Data là một tính năng mạnh mẽ cho phép bạn chạy script khi instance khởi động.\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation/2.4-add-data-to-db/",
	"title": "Cài đặt dữ liệu cho Database",
	"tags": [],
	"description": "",
	"content": "Lấy Public IP address của EC2 instance\nSử dụng MobaXterm để kết nối SSH vào instance qua port 22.\nChọn Session Chọn SSH Remote host, nhập Public IPv4 address mới lấy của instance Specify username, nhập ec2-user Kiểm tra port 22 Chọn Advanced SSH settings Chọn Use private key và chọn keypair của instance. Chọn OK Kết quả sau khi SSH\nChúng ta sử dụng git để clone source code. Trước hết, cài đặt git bằng lệnh sau:\nsudo yum install git Cài đặt MySQL command-line client\nsudo dnf install mariadb105 Kiểm tra cài đặt thành công\nmysql --version Kết nối MySQL command-line client (unencrypted)\nĐối với tham số -h, hãy thay thế DNS name (endpoint) cho DB instance, bạn có thể lấy DNS name ở trong console chi tiết của RDS bạn đã tạo - Đối với tham số -P, hãy thay thế port cho DB instance. (3306) Đối với tham số -u, thay bằng master user lúc bạn tạo RDS Sau khi chạy lệnh thì nhập vào master user password mà bạn đã đặt khi tạo RDS mysql -h fcj-management-db-instance.cdysiiecu90g.ap-southeast-1.rds.amzonaws.com -P 3306 -u admin -p Kết nối DB instance thành công. Tiến hành kiểm tra các database trong instance bằng lệnh sau sẽ in ra danh sách tất cả các cơ sở dữ liệu.\nSHOW DATABASES; Chọn cơ sở dữ liệu để thực hiện các thay đổi đối với nó bằng cách sử dụng USE, hãy dùng initial database lúc bạn tạo RDS .\nUSE \u0026#34;tên database\u0026#34;; Thực hiện tạo bảng trong database awsuser bằng lệnh CREATE TABLE.\nCREATE TABLE `awsfcjuser`.`user` ( `id` INT NOT NULL AUTO_INCREMENT , `first_name` VARCHAR(45) NOT NULL , `last_name` VARCHAR(45) NOT NULL , `email` VARCHAR(45) NOT NULL , `phone` VARCHAR(45) NOT NULL , `comments` TEXT NOT NULL , `status` VARCHAR(10) NOT NULL DEFAULT \u0026#39;active\u0026#39; , PRIMARY KEY (`id`)) ENGINE = InnoDB; Chèn thông tin vào trong bảng dữ liệu bằng lệnh INSERT INTO\nINSERT INTO `user` (`id`, `first_name`, `last_name`, `email`, `phone`, `comments`, `status`) VALUES (NULL, \u0026#39;Amanda\u0026#39;, \u0026#39;Nunes\u0026#39;, \u0026#39;anunes@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Alexander\u0026#39;, \u0026#39;Volkanovski\u0026#39;, \u0026#39;avolkanovski@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Khabib\u0026#39;, \u0026#39;Nurmagomedov\u0026#39;, \u0026#39;knurmagomedov@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Kamaru\u0026#39;, \u0026#39;Usman\u0026#39;, \u0026#39;kusman@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Israel\u0026#39;, \u0026#39;Adesanya\u0026#39;, \u0026#39;iadesanya@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Henry\u0026#39;, \u0026#39;Cejudo\u0026#39;, \u0026#39;hcejudo@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Valentina\u0026#39;, \u0026#39;Shevchenko\u0026#39;, \u0026#39;vshevchenko@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Tyron\u0026#39;, \u0026#39;Woodley\u0026#39;, \u0026#39;twoodley@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Rose\u0026#39;, \u0026#39;Namajunas \u0026#39;, \u0026#39;rnamajunas@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Tony\u0026#39;, \u0026#39;Ferguson \u0026#39;, \u0026#39;tferguson@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Jorge\u0026#39;, \u0026#39;Masvidal \u0026#39;, \u0026#39;jmasvidal@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Nate\u0026#39;, \u0026#39;Diaz \u0026#39;, \u0026#39;ndiaz@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Conor\u0026#39;, \u0026#39;McGregor \u0026#39;, \u0026#39;cmcGregor@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Cris\u0026#39;, \u0026#39;Cyborg \u0026#39;, \u0026#39;ccyborg@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Tecia\u0026#39;, \u0026#39;Torres \u0026#39;, \u0026#39;ttorres@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Ronda\u0026#39;, \u0026#39;Rousey \u0026#39;, \u0026#39;rrousey@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Holly\u0026#39;, \u0026#39;Holm \u0026#39;, \u0026#39;hholm@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;), (NULL, \u0026#39;Joanna\u0026#39;, \u0026#39;Jedrzejczyk \u0026#39;, \u0026#39;jjedrzejczyk@ufc.com\u0026#39;, \u0026#39;012345 678910\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;active\u0026#39;); Sử dụng lệnh SELECT để hiển thị bảng:\nSELECT * FROM user; Sử dụng exit đề rời khỏi. Nếu không thể ngắt kết nối với DB instance, hãy dùng tổ hợp phím Ctrl+C\n"
},
{
	"uri": "//localhost:1313/vi/7-test-solutions/7.4-test-predictive-scaling-solution/",
	"title": "Đọc metrics của giải pháp predictive scaling",
	"tags": [],
	"description": "",
	"content": "Predictive Scaling Từ những lượng truy cập, công việc mà hệ thống mà chúng ta sẽ nhận và gửi đi mỗi ngày, thì ASG có thể \u0026ldquo;dự đoán\u0026rdquo; được lượng truy cập, công việc đó trong khoảng nhiều ngày tới, từ đó giúp cho ASG sẽ phản ứng tốt hơn trong việc khởi tạo và huỷ các instances đi. Thông thường thì Predictive Scaling sẽ dược dùng với các loại scaling khác.\nTiến hành cấu hình Giống ở phần trước, thì mình vẫn sẽ thực hiện scale in thủ công với ASG và chờ cho ASG xoá hết các instances mà dịch vụ này đã tạo.\nSau đó là xoá đi chính sách scaling tự động để tránh việc ảnh hưởng tới phần test này.\nTiếp theo, vào trong tab Activity, kéo xuống phần Predictive scaling policies và ấn Create predictive policy để tạo mới.\nTrong biểu mẫu này, chúng ta sẽ cấu hình như sau:\nPolicy details Name: PredictCPUUtilizationAt15Percent (có thể đặt tên bất kì) Turn on scaling: bật Scale based on forecast. Với chính sách scaling mang tính dự đoán, thì về bản chất là nó chỉ có dự đoán, nhưng mà chúng ta cũng có thể dùng nó để khởi tạo các instances. Tiếp theo, trong phần Metric and target utilization\nMetrics: chọn Custom metric pair. Load metric: chọn Custom CloudWatch metric. Scaling metric: chọn Custom CloudWatch metric. Các bạn sẽ thêm các custom metric json như sau\nVới Load metric { \u0026#34;CustomizedLoadMetricSpecification\u0026#34;: { \u0026#34;MetricDataQueries\u0026#34;: [ { \u0026#34;Label\u0026#34;: \u0026#34;Total CPU Utilization in ASG\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;cpu_sum\u0026#34;, \u0026#34;MetricStat\u0026#34;: { \u0026#34;Metric\u0026#34;: { \u0026#34;MetricName\u0026#34;: \u0026#34;WSCustomCPUUTILIZATION\u0026#34;, \u0026#34;Namespace\u0026#34;: \u0026#34;FCJ Management Custom Metrics\u0026#34;, \u0026#34;Dimensions\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;AutoScalingGroupName\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;FCJ-Management-ASG\u0026#34; } ] }, \u0026#34;Stat\u0026#34;: \u0026#34;Sum\u0026#34; }, \u0026#34;ReturnData\u0026#34;: true } ] } } Với Scaling metric { \u0026#34;CustomizedScalingMetricSpecification\u0026#34;: { \u0026#34;MetricDataQueries\u0026#34;: [ { \u0026#34;Label\u0026#34;: \u0026#34;Average CPU Utilization in ASG\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;cpu_avg\u0026#34;, \u0026#34;MetricStat\u0026#34;: { \u0026#34;Metric\u0026#34;: { \u0026#34;MetricName\u0026#34;: \u0026#34;WSCustomCPUUTILIZATION\u0026#34;, \u0026#34;Namespace\u0026#34;: \u0026#34;FCJ Management Custom Metrics\u0026#34;, \u0026#34;Dimensions\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;AutoScalingGroupName\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;FCJ-Management-ASG\u0026#34; } ] }, \u0026#34;Stat\u0026#34;: \u0026#34;Average\u0026#34; }, \u0026#34;ReturnData\u0026#34;: true } ] } } Tiếp theo là tích chọn Add custom capacity metric.\nVà tương tự như 2 bước ở trên, mình sẽ thêm custom metric json cho Capacity metric\n{ \u0026#34;CustomizedCapacityMetricSpecification\u0026#34;: { \u0026#34;MetricDataQueries\u0026#34;: [ { \u0026#34;Label\u0026#34;: \u0026#34;Number of instances in ASG\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;capacity_avg\u0026#34;, \u0026#34;MetricStat\u0026#34;: { \u0026#34;Metric\u0026#34;: { \u0026#34;MetricName\u0026#34;: \u0026#34;WSCustomGroupInstances\u0026#34;, \u0026#34;Namespace\u0026#34;: \u0026#34;FCJ Management Custom Metrics\u0026#34;, \u0026#34;Dimensions\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;AutoScalingGroupName\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;FCJ-Management-ASG\u0026#34; } ] }, \u0026#34;Stat\u0026#34;: \u0026#34;Average\u0026#34; }, \u0026#34;ReturnData\u0026#34;: true } ] } } Nếu như bạn có cấu hình ở bước 2.6 - Prepare metrics for predictive scaling trước đó, thì sau khi cấu hình xong, bạn sẽ thấy được 2 biểu đồ được hiển thị.\nỞ phần Pre-launch instances trong phần Additional scaling settings - optional, chỉnh xuống 1 minutes. Ấn Create để tạo.\nGiống với Dynamic, thì thông số Pre-launch instances này cũng sẽ ảnh hưởng tới thời điểm mà các instances sẽ được khởi tạo. Ví dụ như ASG dự đoán là lúc 23:00 giờ cao điểm, thì ASG sẽ dựa vào thông số này và tạo instance vào lúc 22:59 phút, theo như cấu hình.\nKiểm tra lại kết quả\nĐọc metric từ dữ liệu mẫu Vào trong chính sách đó, chúng ta sẽ đọc được 2 biểu đồ là Load và Capacity. Biểu đồ này cung cấp cho chúng ta về dữ liệu của các lưu lượng cũng như là số các instance đã dùng trong các ngày trước đó, từ đó thì nó đưa ra được dự đoán của các ngày tiếp theo, đươc biểu diễn bằng đường màu tím.\nBiểu đồ được lấy theo giờ UTC + 0, và chúng ta đang ở múi giờ +7 nên chúng ta sẽ cần phải thêm 7 khi đọc các biểu đồ này.\nTrước tiên, tập chung vào biểu đồ ở bên trái trước, vào thời điểm 09:00 (theo giờ của Việt Nam là 26:00) thì lượng chịu tải tổng là 773.542.\nVà để hiểu được thông số trên là của cái gì thì chúng ta nhìn qua biểu đồ bên phải.\nChúng ta có thể thấy là vào thời điểm đó thì dự đoán sẽ có 13 instance được khởi tạo, và lượng tải dữ liệu kia sẽ tương ứng với số các instance đó.\nChúng ta có thể xem các thời điểm khác.\nNếu bạn có thể chờ được thời điểm được dự báo, thì vào trong phần tab Activity của ASG, chúng ta sẽ thấy được là ASG khởi tạo một instance mới vào lúc 15:59, 1 phút trước thời điểm 16:00 như đã dự đoán ở trên.\nKết luận Chúng ta có thể kết hợp Predictive scaling với Dynamic scaling hoặc là các loại scaling khác để tăng độ linh hoạt cho ASG cũng như là độ tin cậy của hệ thống. Hệ thống nào cho lượng tải đồng đều theo thời gian thì sử dụng predictive để dự đoán cũng rất hợp lý.\n"
},
{
	"uri": "//localhost:1313/vi/4-setup-load-balancer/",
	"title": "Thiết lập Load Balancer",
	"tags": [],
	"description": "",
	"content": "Elastic Load Balancing (ELB) ℹ️ Information: Elastic Load Balancing (ELB) là một dịch vụ AWS quan trọng để đảm bảo tính khả dụng cao và khả năng mở rộng cho ứng dụng của bạn. ELB tự động phân phối lưu lượng truy cập đến trên nhiều mục tiêu, như các phiên bản Amazon EC2, container, địa chỉ IP, và các hàm Lambda, giúp tối ưu hóa việc sử dụng tài nguyên, cải thiện hiệu suất và đảm bảo khả năng chịu lỗi.\n💡 Pro Tip: Sử dụng ELB kết hợp với Auto Scaling Groups để tự động điều chỉnh số lượng máy chủ dựa trên nhu cầu thực tế, giúp tối ưu chi phí vận hành.\n🔒 Security Note: ELB hỗ trợ mã hóa SSL/TLS và tích hợp với AWS Certificate Manager để bảo vệ dữ liệu trong quá trình truyền tải.\nNội dung Tạo Target Group Tạo Load Balancer Lợi ích của việc sử dụng Load Balancer Việc sử dụng Load Balancer trong kiến trúc ứng dụng của bạn mang lại nhiều lợi ích quan trọng:\nTính sẵn sàng cao (High Availability): Load Balancer phân phối lưu lượng truy cập đến nhiều EC2 instance chạy trong các Availability Zone khác nhau, giúp ứng dụng của bạn vẫn hoạt động ngay cả khi một AZ gặp sự cố.\nKhả năng mở rộng (Scalability): Kết hợp với Auto Scaling Group, Load Balancer cho phép ứng dụng của bạn tự động mở rộng để đáp ứng nhu cầu tăng cao và thu hẹp khi nhu cầu giảm.\nKiểm tra sức khỏe (Health Checks): Load Balancer thường xuyên kiểm tra sức khỏe của các EC2 instance và chỉ định hướng lưu lượng đến các instance khỏe mạnh.\nBảo mật (Security): Application Load Balancer (ALB) cung cấp các tính năng bảo mật như tích hợp với AWS WAF để bảo vệ khỏi các cuộc tấn công web phổ biến.\nCân bằng tải thông minh: ELB có thể phân phối lưu lượng dựa trên nhiều thuật toán khác nhau, đảm bảo không có instance nào bị quá tải.\nCác loại Load Balancer trong AWS AWS cung cấp ba loại Load Balancer chính:\nApplication Load Balancer (ALB): Hoạt động ở tầng ứng dụng (Layer 7) và hỗ trợ định tuyến dựa trên nội dung, phù hợp cho các ứng dụng web.\nNetwork Load Balancer (NLB): Hoạt động ở tầng vận chuyển (Layer 4), xử lý hàng triệu yêu cầu mỗi giây với độ trễ cực thấp, phù hợp cho các ứng dụng yêu cầu hiệu suất cao.\nClassic Load Balancer (CLB): Phiên bản cũ hơn, hỗ trợ cả Layer 4 và Layer 7, nhưng có ít tính năng hơn so với ALB và NLB.\nTrong bài lab này, chúng ta sẽ sử dụng Application Load Balancer vì nó phù hợp nhất cho ứng dụng web của chúng ta.\n⚠️ Warning: Khi thiết lập Load Balancer, hãy đảm bảo cấu hình security group phù hợp để cho phép lưu lượng từ Load Balancer đến các EC2 instance trong Auto Scaling Group.\n"
},
{
	"uri": "//localhost:1313/vi/5-test/",
	"title": "Kiểm tra kết quả",
	"tags": [],
	"description": "",
	"content": "Kiểm tra kết quả triển khai ℹ️ Information: Sau khi hoàn tất việc triển khai Load Balancer, chúng ta cần xác minh rằng hệ thống đang hoạt động đúng như mong đợi. Việc kiểm tra này giúp đảm bảo rằng lưu lượng truy cập được phân phối chính xác đến ứng dụng của chúng ta.\nĐể truy cập ứng dụng, hãy sử dụng DNS name của Load Balancer và dán vào trình duyệt web:\nKết quả hiển thị trang web ứng dụng quản lý của chúng ta:\n💡 Pro Tip: Luôn sử dụng DNS name của Load Balancer thay vì địa chỉ IP trực tiếp của EC2 instance. Điều này đảm bảo ứng dụng của bạn vẫn hoạt động ngay cả khi các instance cơ bản được thay thế hoặc mở rộng.\nKiểm tra tính ổn định của hệ thống Để xác minh rằng hệ thống hoạt động ổn định, chúng ta sẽ thực hiện một số thao tác cơ bản. Đầu tiên, hãy thử thay đổi thông tin của một record trong ứng dụng:\nSau khi nhập thông tin, nhấn Submit và quan sát thông báo xác nhận:\nQuay lại trang chủ, chúng ta có thể thấy thông tin đã được cập nhật thành công:\n⚠️ Warning: Trong các bước kiểm thử tiếp theo, chúng ta sẽ tập trung vào việc phân tích các metrics từ CloudWatch. Tuy nhiên, bạn nên kết hợp việc theo dõi metrics với việc kiểm tra trải nghiệm người dùng thực tế để đánh giá toàn diện hiệu suất của hệ thống.\n🔒 Security Note: Khi kiểm tra ứng dụng qua Load Balancer, hãy đảm bảo rằng bạn đang sử dụng kết nối an toàn (HTTPS) nếu ứng dụng của bạn xử lý dữ liệu nhạy cảm. Trong môi trường sản xuất, việc cấu hình SSL/TLS cho Load Balancer là một thực hành bảo mật quan trọng.\nKiểm tra khả năng chịu tải của hệ thống ℹ️ Information: Một trong những lợi ích chính của việc sử dụng Load Balancer là khả năng phân phối tải đồng đều giữa các EC2 instance. Để kiểm tra khả năng này, chúng ta có thể theo dõi các metrics trên CloudWatch.\nTruy cập vào dịch vụ CloudWatch từ AWS Management Console:\nTrong CloudWatch, chúng ta có thể xem các metrics của Load Balancer như RequestCount, TargetResponseTime, và HTTPCode:\n💡 Pro Tip: Thiết lập CloudWatch Dashboards để theo dõi các metrics quan trọng của hệ thống trong một giao diện tập trung, giúp bạn nhanh chóng phát hiện các vấn đề tiềm ẩn.\nKiểm tra khả năng tự phục hồi Một tính năng quan trọng của kiến trúc sử dụng Load Balancer và Auto Scaling Group là khả năng tự phục hồi khi có instance gặp sự cố. Để kiểm tra tính năng này:\nTruy cập vào EC2 Management Console Chọn một trong các instance đang chạy trong Auto Scaling Group Thực hiện thao tác terminate instance Sau khi terminate instance, Auto Scaling Group sẽ tự động phát hiện và khởi tạo một instance mới để thay thế:\n⚠️ Warning: Trong quá trình Auto Scaling Group tạo instance mới, có thể có một khoảng thời gian ngắn khi hệ thống hoạt động với công suất giảm. Tuy nhiên, Load Balancer sẽ tiếp tục định tuyến lưu lượng đến các instance khỏe mạnh còn lại.\nKiểm tra khả năng mở rộng tự động Auto Scaling Group cho phép hệ thống tự động mở rộng khi tải tăng cao. Để kiểm tra tính năng này, chúng ta có thể tạo tải nhân tạo lên hệ thống và quan sát phản ứng:\nSử dụng công cụ tạo tải như Apache JMeter hoặc AWS Load Testing Theo dõi các metrics như CPU Utilization trên CloudWatch Quan sát Auto Scaling Group tự động tăng số lượng instance khi tải vượt ngưỡng 💡 Pro Tip: Khi thiết kế các bài kiểm tra tải, hãy mô phỏng các mẫu lưu lượng thực tế mà ứng dụng của bạn dự kiến sẽ gặp phải. Điều này giúp bạn đánh giá chính xác hơn hiệu suất của hệ thống trong điều kiện thực tế.\nKiểm tra khả năng chịu lỗi của Availability Zone Một lợi ích lớn của việc triển khai ứng dụng trên nhiều Availability Zone là khả năng chịu lỗi khi một AZ gặp sự cố. Để kiểm tra tính năng này:\nTruy cập vào VPC Management Console Chọn một subnet trong một AZ cụ thể mà ứng dụng đang chạy Tạm thời vô hiệu hóa lưu lượng đến subnet đó bằng cách điều chỉnh Network ACLs Quan sát Load Balancer tự động định tuyến lưu lượng đến các instance trong các AZ còn lại:\n🔒 Security Note: Khi thực hiện các bài kiểm tra chịu lỗi, hãy đảm bảo rằng bạn có kế hoạch khôi phục rõ ràng để nhanh chóng khôi phục hệ thống về trạng thái bình thường sau khi hoàn thành kiểm tra.\nKết luận Qua các bài kiểm tra, chúng ta đã xác nhận rằng hệ thống triển khai với Load Balancer và Auto Scaling Group hoạt động hiệu quả, đảm bảo tính sẵn sàng cao và khả năng mở rộng linh hoạt cho ứng dụng FCJ-Management.\nKiến trúc này cung cấp nhiều lợi ích quan trọng:\nTính sẵn sàng cao: Ứng dụng vẫn hoạt động ngay cả khi một số instance hoặc một AZ gặp sự cố. Khả năng mở rộng tự động: Hệ thống tự động điều chỉnh số lượng instance dựa trên nhu cầu thực tế. Cân bằng tải hiệu quả: Load Balancer đảm bảo lưu lượng được phân phối đồng đều giữa các instance. Tự phục hồi: Khi một instance gặp sự cố, hệ thống tự động thay thế nó với một instance mới. 💡 Pro Tip: Để tối ưu hóa hơn nữa hệ thống trong môi trường sản xuất, hãy xem xét việc triển khai các giải pháp giám sát và cảnh báo toàn diện, cũng như thiết lập các kế hoạch khôi phục sau thảm họa (DR) chi tiết.\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation/2.5-deploy-web-server/",
	"title": "Triển khai máy chủ web",
	"tags": [],
	"description": "",
	"content": "Cài đặt node version manager (nvm) bằng cách nhập nội dung sau:\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash Chạy ba dòng lệnh sau trong terminal của bạn để bắt đầu sử dụng nvm mà không cần phải đóng và mở lại terminal:\nexport NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; [ -s \u0026#34;$NVM_DIR/bash_completion\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/bash_completion\u0026#34; Sử dụng nvm để cài đặt Node.js bằng cách nhập nội dung sau vào dòng lệnh.\nnvm install 20 Thực hiện clone repository code ứng dụng\ngit clone https://github.com/First-Cloud-Journey/000004-EC2.git Đến thư mục của bài lab 000004-EC2\ncd 000004-EC2 NPM là viết tắt của Node package manager là một công cụ tạo và quản lý các thư viện lập trình Javascript cho Node.js. Sử dụng npm init khởi tạo project sẽ tạo ra file package.json mẫu.\nnpm init Bạn nên nhấn Enter liên tục để tạo giá trị mặc định\nCài đặt pm2 trong Global, PM2 được sử dụng để quản lý và giám sát các ứng dụng Node.js đang chạy. Nó cho phép các ứng dụng chạy dưới nền.\nnpm install -g pm2 Tiếp theo, chúng ta định nghĩa lại câu script để chạy ứng dụng, chúng ta sẽ dùng vim để mở file pakage.json, trong phần scripts ở key start, gán cho nó value sau, điều này sẽ giúp ứng dụng của chúng ta chạy nền:\npm2 start app.js Nhập lệnh sau đây để truy cập vào nội dung file package.json\nnano package.json Chỉnh sửa nội dung file như ảnh bên dưới: Tiếp tục dùng vim để vào file .env, sau đó nhập vào nội dung sau để thiết lập kết nối tới database.\nDB_HOST=\u0026#39;fcj-management-db-instance.c9yyuau4yxcz.eu-west-3.rds.amazonaws.com DB_NAME=\u0026#39;awsfcjuser\u0026#39; DB_USER=\u0026#39;admin\u0026#39; DB_PASS=\u0026#39;123Vodanhphai\u0026#39; Tiến hành khởi chạy ứng dụng:\nnpm start Lệnh pm2 status trong PM2 được sử dụng để hiển thị trạng thái hiện tại của tất cả các ứng dụng đang được quản lý bởi PM2. Khi bạn chạy lệnh này, chúng ta sẽ nhận được thông tin tổng quan về từng ứng dụng.\nTiếp theo, chúng ta cần lấy được public DNS của instance để có thể truy cập được ứng dụng từ trình duyệt.\nỨng dụng của chúng ta đã chạy ổn định.\nTiếp theo chúng ta dùng câu lệnh pm2 startup để tiến hành cấu hình PM2 tự động khởi động lại các ứng dụng khi máy chủ khởi động lại. Nó sẽ yêu cầu thiết lập Startup Script, hãy copy/paste command đó và chạy.\nĐể đảm bảo các ứng dụng đang chạy được lưu lại và khởi động lại khi server khởi động lại, chúng ta cần chạy lệnh pm2 save. Lệnh này sẽ lưu trạng thái hiện tại của các tiến trình vào danh sách khởi động.\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation/2.6-prepare-metrics-for-predictive-scaling/",
	"title": "Chuẩn bị các metric cho Predictive scaling",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị dữ liệu cho Predictive scaling Bởi vì Predictive scaling cần phải có một lượng dữ liệu trong vòng hơn 2 ngày để có thể đưa ra được các dự đoán vào các ngày tiếp theo, mà ở đây chúng ta lại không có các dữ liệu đó cho nên là chúng ta sẽ cần phải chuẩn bị để giải lập một môi trường như thế.\nCác bước chuẩn bị Đầu tên là chúng ta sẽ tạo một folder mới với tên là metric-preparation và chuyển vào trong thư mục này\nmkdir metric-preparation \u0026amp;\u0026amp; cd metric-preparation Sau đó là tải kịch bản để chuẩn bị các dữ liệu\ncurl -o prepare-metric-data.sh https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/prepare-metric-data.sh Sau khi tải xong thì vào trong để thay đổi phần câu lệnh trong kịch bản này lại một xíu\nvim prepare-metric-data.sh Chỉnh sửa biến thời gian thành:\ntime=$(date -d \u0026#34;$((5*i)) minutes ago\u0026#34;) Sau khi chỉnh sửa xong thì giờ chúng ta tiến hành tải các dữ liệu chưa qua xử lý, đó là lý do vì sao mà chúng ta cần tải kịch bản xử lý dữ liệu này trước. Trước tiên là metric cho các instances.\ncurl -o metric-cpu.json https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/metric-cpu.json Tiếp theo là dữ liệu cho CPU\ncurl -o metric-cpu.json https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/metric-cpu.json Tiến hành sửa đổi lần lượt 2 loại dữ liệu này, đầu tiên là cho CPU trước\nbash prepare-metric-data.sh metric-cpu.json FCJ-Management-ASG \u0026amp;\u0026amp; cat metric-cpu.json Tiếp theo là cho instances\nbash prepare-metric-data.sh metric-instances.json FCJ-Management-ASG \u0026amp;\u0026amp; cat metric-instances.json Ở 2 lệnh ở trên đều xuất hiện tham số FCJ-Management-ASG thì nó chính là tên của Auto Scaling Group mà chúng ta sẽ tạo về sau, nên về sau thì bạn cần sẽ phải tạo ASG với cùng tên như thế. Còn không thì bạn nên thay một cái tên khác từ bây giờ.\nTải dữ liệu lên CloudWatch Trong Amazon Linux 2023, và dùng đúng AMI thì AWS CLI đã được cài đặt sẵn ở bên trong, lúc này thì chúng ta chỉ cần lấy ra để cấu hình lại các crediential là được. Nên nhớ là bạn phải có một IAM User đủ quyền để tải dữ liệu lên CloudWatch hoặc ít nhất là đủ quyền để làm bài workshop này.\nVào trang IAM, vào thông tin IAM User và ấy Access Key Id và Serect Access Key, nếu chưa có thì tạo mới.\naws configure Và tiến hành cấu hình\nSau đó là tải 2 file dữ liệu mà chúng ta đã chuẩn bị trước đó lên trên CloudWatch\naws cloudwatch put-metric-data --namespace \u0026#39;FCJ Management Custom Metrics\u0026#39; --metric-data file://metric-cpu.json aws cloudwatch put-metric-data --namespace \u0026#39;FCJ Management Custom Metrics\u0026#39; --metric-data file://metric-instances.json Kiểm tra Cuối cùng thì chúng ta sẽ vào trong CloudWatch để kiểm tra kết quả\nTìm CloudWatch Click để vào trong CloudWatch Console Trong giao diện Console của CloudWatch\nChọn All metrics Chọn FCJ Management Custom Metrics Chọn tiếp AutoScalingGroupName\nChọn tiếp 2 thông số như trên hình, chờ một khoảng thời gian để nhận được kết quả.\nChúng ta sẽ phải chờ khoảng 30 phút hoặc hơn để cho CloudWatch xử lý xong. Thay vì chờ thì chúng ta nên làm tiếp các phần tiếp theo.\nHiểu về dữ liệu đã tải lên Dữ liệu mà chúng ta đã tải lên CloudWatch bao gồm hai loại metric quan trọng:\nCPU Utilization: Đây là dữ liệu về mức sử dụng CPU của Auto Scaling Group theo thời gian. Metric này giúp AWS Predictive Scaling hiểu được mô hình sử dụng tài nguyên của ứng dụng và dự đoán nhu cầu trong tương lai.\nInstance Count: Đây là dữ liệu về số lượng instance đã được sử dụng trong quá khứ. Metric này giúp hệ thống hiểu được cách Auto Scaling Group đã phản ứng với các thay đổi về tải trong quá khứ.\nHai loại dữ liệu này cung cấp cho AWS Predictive Scaling thông tin cần thiết để:\nPhân tích mô hình sử dụng tài nguyên theo thời gian Dự đoán nhu cầu tài nguyên trong tương lai Tự động điều chỉnh capacity trước khi nhu cầu thực sự tăng cao Lợi ích của Predictive Scaling Việc sử dụng Predictive Scaling mang lại nhiều lợi ích so với chỉ sử dụng Dynamic Scaling thông thường:\nChủ động thay vì phản ứng: Predictive Scaling tăng/giảm capacity trước khi nhu cầu thực sự thay đổi, giúp tránh tình trạng ứng dụng bị quá tải.\nTối ưu chi phí: Bằng cách dự đoán chính xác nhu cầu, bạn chỉ sử dụng đúng số lượng tài nguyên cần thiết vào đúng thời điểm.\nCải thiện trải nghiệm người dùng: Người dùng không phải đợi hệ thống scale up khi tải tăng cao đột ngột.\nXử lý tốt các mô hình tải có tính chu kỳ: Đặc biệt hiệu quả cho các ứng dụng có mô hình sử dụng theo giờ, theo ngày hoặc theo mùa.\nTrong phần tiếp theo, chúng ta sẽ cấu hình Auto Scaling Group để sử dụng các metric này cho Predictive Scaling.\n"
},
{
	"uri": "//localhost:1313/vi/6-create-auto-scaling-group/",
	"title": "Tạo Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Vấn đề ở phần trước ℹ️ Information: Ở phần kiểm thử kết quả trước đó, chúng ta nhận thấy khi ứng dụng nhận nhiều request, hiệu suất không còn ổn định. Giải pháp là tăng số lượng EC2 Instance trong hệ thống và sử dụng Load Balancer để phân phối các yêu cầu từ người dùng.\nTuy nhiên, phương pháp thủ công không hiệu quả vì để khởi tạo một EC2 Instance mới, chúng ta cần đảm bảo mỗi instance đều có đầy đủ ứng dụng, thư viện và cấu hình cần thiết để xử lý các yêu cầu.\nThiết lập Auto Scaling Group Tạo Auto Scaling Group Ở giao diện quản lý EC2, kéo bảng lựa chọn bên trái xuống cuối:\nChọn Auto Scaling Groups Ấn Create Auto Scaling group Trong giao diện tạo Auto Scaling group, điền các thông tin sau:\nName: FCJ-Management-ASG Trong Launch template: Launch template: chọn FCJ-Management-template Version: Default (1) ⚠️ Warning: Tên của ASG nên đặt đúng với tên ASG đã được đặt ở phần 2.6 trước đó, để đảm bảo tính nhất quán cho Predictive Scaling.\n🔒 Security Note: Launch template được chọn cho ASG phải là template đã được cài đặt đầy đủ MySQL Client, Node, Source Code và PM2 để đảm bảo các Target hoạt động bình thường. Nếu bạn đã làm theo các bước trong phần 2 và phần 3, bạn đã thiết lập đúng.\nThiết lập mạng Trong phần Network, cấu hình như sau:\nVPC: chọn VPC AutoScaling-Lab đã tạo trước đó Availability Zones and subnets: chọn 3 public subnets đã tạo Ấn Next Thiết lập Load Balancer ℹ️ Information: Trước đó chúng ta đã tạo Application Load Balancer và Target Group đã được gắn vào bộ cân bằng tải. Giờ chúng ta sẽ kết nối ASG với Load Balancer đó.\nLoad balancing: chọn Attach to an existing load balancer Attach to an existing load balancer: chọn Choose from your load balancer target group Existing load balancer target group: chọn FCJ-Management-TG | HTTP 💡 Pro Tip: Khi cấu hình đúng Target Group và Application Load Balancer, lựa chọn Existing load balancer target group sẽ hiển thị Target Group đã tạo, xác nhận rằng cả ALB và TG đều tồn tại và được cấu hình đúng.\nTrong phần VPC Lattice integration options: chọn No VPC Lattice service (không sử dụng trong bài lab này)\nTiếp theo, ở phần Health checks:\nTích chọn Turn on Elastic Load Balancing health checks Giữ các thiết lập còn lại theo mặc định Thiết lập Size và Scaling Policies ℹ️ Information: Trong phần này, chúng ta xác định hành vi mở rộng của Group và số lượng Instance sẽ được khởi tạo trong quá trình Scale out (mở rộng) và Scale in (thu hẹp).\nTrong phần Group size: Desired capacity: 1 Trong phần Scaling limits: Min desired capacity: 1 Max desired capacity: 3 Trong Automatic scaling - optional: chọn No scaling policies (tạm thời chưa thiết lập chính sách scaling cho ASG) 💡 Pro Tip: Chúng ta không thiết lập chính sách scaling ngay lúc này vì sẽ thực hiện 4 chiến lược scaling khác nhau trong các bước tiếp theo. Trong Instance maintenance policy: chọn No policy\nTrong phần Additional settings, ở mục Monitoring:\nTích chọn Enable group metrics collection within CloudWatch Ấn Next Thiết lập thông báo ℹ️ Information: Trong phần này, chúng ta thiết lập thông báo qua email (sử dụng Amazon SNS) khi ASG thực hiện các hành động như:\nKhởi tạo Instance mới Huỷ Instance Thất bại khi khởi tạo Instance Thất bại khi huỷ Instance Cấu hình thông báo:\nSend a notification to: asg-topic (tạo topic mới) With these recipients: nhập email bạn muốn nhận thông báo Event types: chọn tất cả Ấn Next Xác nhận lại các thông tin và ấn Create Auto Scaling group\nKết quả ⚠️ Warning: Trong quá trình tạo, bạn sẽ nhận được email xác nhận đăng ký từ SNS topic. Hãy kiểm tra và xác nhận đăng ký để nhận các thông báo tiếp theo.\nVì chúng ta đã thiết lập Desired capacity = 1, ASG sẽ tự động tạo một Instance mới, và bạn sẽ nhận được email thông báo.\nVào tab Activity của ASG FCJ-Management-ASG để kiểm tra:\n💡 Pro Tip: Trong quá trình thực hiện các chiến lược scaling khác nhau, bạn có thể nhận được nhiều email thông báo. Đây là chủ đích khi chúng ta thiết lập SNS, giúp theo dõi và kiểm soát tốt hơn các hoạt động của Auto Scaling Group.\n"
},
{
	"uri": "//localhost:1313/vi/7-test-solutions/",
	"title": "Kiểm thử các giải pháp",
	"tags": [],
	"description": "",
	"content": "Các giải pháp / kỹ thuật scaling ℹ️ Information: Dịch vụ Auto Scaling Group cung cấp nhiều giải pháp scaling khác nhau, tùy thuộc vào nhu cầu và mức độ sử dụng hệ thống. Chúng ta cần tính toán, ước lượng, quan sát và lập kế hoạch sử dụng từng loại hoặc kết hợp các loại với nhau để tăng độ linh hoạt của hệ thống.\nTrong phần này, chúng ta sẽ thử nghiệm từng giải pháp, nhưng trước tiên hãy tìm hiểu sơ lược về các giải pháp scaling này.\nManual scaling ℹ️ Information: Manual Scaling là việc chúng ta thực hiện mở rộng hay thu hẹp các target trong một Target Group bằng cách điều chỉnh thông số Desired capacity trong Auto Scaling Group. Trong một số tình huống đơn lẻ, cần xử lý nhanh, chúng ta cần thực hiện việc thêm và bớt các targets thủ công.\nScheduled scaling ℹ️ Information: Khi chúng ta nắm rõ được lưu lượng mạng vào và ra của hệ thống hoặc thời điểm mà các target hoạt động ở công suất gần như cao nhất, và hoạt động này diễn ra liên tục và mang tính dài hạn (có thể là hàng năm), chúng ta có thể đặt lịch (và hẹn giờ) để Auto Scaling Group thực hiện việc mở rộng và thu gọn các targets.\nDynamic scaling ℹ️ Information: Nếu lưu lượng mạng đi vào hệ thống không diễn ra theo một trật tự nào và khó đoán, chúng ta có thể dùng giải pháp tự động scaling của ASG. Khi đó, ASG sẽ dựa vào cấu hình Dynamic scaling policy để triển khai việc mở rộng và thu gọn các targets cho phù hợp hơn với hệ thống.\nPredictive scaling ℹ️ Information: Predictive scaling là kỹ thuật giúp ASG dự đoán lưu lượng mạng trong vòng 3 hoặc nhiều ngày tới. Với những hệ thống khó đoán, chúng ta có thể kết hợp giải pháp này với Dynamic scaling để tăng tính linh hoạt cho hệ thống. Giải pháp này sẽ biểu diễn các thông số tùy vào cấu hình, nhưng ý tưởng chung vẫn là dự đoán trước các lưu lượng và mức sử dụng trong hệ thống.\nVì khi thực hiện phần này chúng ta không có dữ liệu ở phần trước, nên đó là lý do mà chúng ta cần phải chuẩn bị và chạy dữ liệu mẫu ở phần 2.6 - Prepare metrics for predictive scaling trước đó.\nCài đặt chương trình kiểm thử ℹ️ Information: Trước khi đi vào phần này, chúng ta cần tải một chương trình kiểm thử để có thể giả lập hệ thống đang chịu tải ở lưu lượng cao. Đầu tiên, vào đường dẫn này để tải chương trình kiểm thử về: https://www.paessler.com/tools/webstress\nChúng ta sẽ tải về file Rar, trích xuất file cài đặt ở bên trong và cài đặt chương trình. Sau khi cài đặt xong, chúng ta vào chương trình và sẽ thấy giao diện như sau:\nNội dung Kiểm thử giải pháp manual scaling Kiểm thử giải pháp scheduled scaling Kiểm thử giải pháp dynamic scaling Kiểm thử giải pháp predictive scaling Thời gian để làm phần này khá lâu và cần phải quan sát kỹ lưỡng (bạn có thể test trong quá trình chạy kiểm thử), nên bạn phải kiên nhẫn và kỹ lưỡng để quan sát kết quả.\nLưu ý khi thực hiện kiểm thử ⚠️ Warning: Khi thực hiện các bài kiểm thử scaling, cần lưu ý một số điểm sau:\nChi phí: Mỗi khi ASG tạo thêm instance, bạn sẽ phải trả phí cho các instance đó. Hãy đảm bảo thiết lập giới hạn số lượng instance tối đa (Max capacity) phù hợp với ngân sách của bạn.\nThời gian chờ: Các metrics trong CloudWatch thường có độ trễ khoảng 1-5 phút. Đồng thời, việc khởi tạo instance mới cũng cần thời gian. Vì vậy, hãy kiên nhẫn khi theo dõi kết quả kiểm thử.\nDọn dẹp tài nguyên: Sau khi hoàn thành kiểm thử, hãy đảm bảo xóa các chính sách scaling không cần thiết và điều chỉnh lại Desired capacity về mức phù hợp để tránh phát sinh chi phí không mong muốn.\nKết hợp các giải pháp: Trong môi trường thực tế, việc kết hợp nhiều loại scaling (như Dynamic với Predictive) thường mang lại hiệu quả tốt hơn so với chỉ sử dụng một loại.\n💡 Pro Tip: Nên thiết lập các cảnh báo (CloudWatch Alarms) để được thông báo khi số lượng instance vượt quá ngưỡng nhất định, giúp kiểm soát chi phí tốt hơn trong quá trình kiểm thử.\nCác metrics quan trọng cần theo dõi Khi thực hiện kiểm thử các giải pháp scaling, bạn nên theo dõi các metrics sau:\nCPU Utilization: Phần trăm sử dụng CPU của các instance Network In/Out: Lưu lượng mạng vào/ra của các instance Request Count Per Target: Số lượng request mà mỗi target nhận được Target Response Time: Thời gian phản hồi của các target Healthy Host Count: Số lượng host đang hoạt động bình thường Việc theo dõi các metrics này sẽ giúp bạn đánh giá hiệu quả của các giải pháp scaling và điều chỉnh cấu hình cho phù hợp với nhu cầu thực tế của ứng dụng.\n"
},
{
	"uri": "//localhost:1313/vi/8-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Sau khi thực hành xong bài workshop chúng ta tiến hành bước dọn dẹp tài nguyên\nXóa Auto Scaling Group Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, lướt xuống và chọn Auto Scaling Groups\nChọn Auto Scaling Groups FCJ-Management-ASG Nhấn vào nút Actions ở góc trên bên phải màn hình Chọn Delete Xóa Load Balancer: Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, lướt xuống và chọn Load Balancer\nChọn Load Balancer FCJ-Management-LB Nhấn vào nút Actions ở góc trên bên phải màn hình Chọn Delete load balancer Xóa Target Group: Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, lướt xuống và chọn Target Group\nChọn Target Group FCJ-Management-TG Nhấn vào nút Actions ở góc trên bên phải màn hình Chọn Delete Xóa Launch Template: Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, lướt xuống và chọn Launch Templates\nChọn Launch Templates CJ-Management-TG Nhấn vào nút Actions ở góc trên bên phải màn hình Chọn Delete template Xóa AMI: Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, lướt xuống và chọn AMIs\nChọn AMI FCJ-Management-AMI Nhấn vào nút Actions ở góc trên bên phải màn hình Chọn Deregister AMI. Terminate EC2 instance Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, chọn Instance\nChọn FCJ-Management instance Nhấn vào nút Instance state ở góc trên bên phải màn hình Chọn Terminate (delete) instance Xóa RDS Database Truy cập RDS Trên thanh điều hướng bên trái, chọn Databases instance Chọn database instance fcj-management-db-instance liên quan tới bài lab. Nhấn vào Modify. Ở phần Modify DB Instance, chúng ta kéo xuống dưới cùng\nNhấp bỏ Enable deletion protection Nhấn Continue Tiếp tục ở phần Schedule modifications\nChọn Apply immediately Nhấn Modify DB instance Tiến hành xoá DB instance\nChọn database instance fcj-management-db-instance Nhấn vào nút Actions ở góc trên bên phải màn hình Chọn Delete Chọn I acknowledge that upon instance deletion, automated, including system snapshots and point -in-time recovery, will no longer be available Điền delete me Nhấn Delete Xóa Subnet Group Chọn Subnet groups Chọn subnet group fcj-management-subnet-group Chọn Delete "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]